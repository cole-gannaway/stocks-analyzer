{"version":3,"sources":["app/hooks.ts","utilities/csv-utils.ts","components/DatePickerWrapper.tsx","utilities/date-utils.ts","utilities/number-utils.ts","components/DataRow.tsx","components/DataTableHead.tsx","components/DataTable.tsx","slices/currentPricesSlice.ts","slices/transactionsSlice.ts","model/ITransaction.ts","components/DashboardTD.tsx","components/DollarCostAverages.tsx","utilities/transaction-utils.ts","firebase/firebase.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","convertCSVRowIntoTransactionRow","csvRow","symbol","date","parseInt","amount","parseFloat","price","isNaN","DatePickerWrapper","props","utils","DateFnsUtils","margin","format","value","ms","Date","month","actualMonth","toString","getMonthInMMFormat","getMonth","getDateinDDFormat","getDate","getFullYear","convertDateMsToString","onChange","getTime","variant","KeyboardButtonProps","roundDecimalPlaces","val","decimalPlaces","Math","round","Number","EPSILON","pow","formatDollarAmount","sigFigs","str","newStr","sigFigCount","char","concat","truncateSignificantFigures","toFixed","DataRow","useState","isEditing","setIsEditing","data","setSymbol","setDate","setAmount","setPrice","dateTime","commaFormatter","Intl","NumberFormat","buySell","textColor","strikeThrough","isUsed","toggleIsEditing","TableRow","TableCell","onClick","e","updateRow","uuid","style","minWidth","textDecoration","TextField","target","inputProps","toLocaleDateString","toLocaleTimeString","color","type","deleteRow","DataTableHead","container","spacing","item","xs","sm","title","disabled","addRow","DataTable","TableContainer","component","Paper","maxHeight","overflowX","Table","stickyHeader","TableHead","TableBody","Object","entries","map","entry","row","dcaData","accept","files","file","reader","FileReader","onload","evt","bstr","result","rows","parse","dataRows","i","length","dataRow","push","onImportComplete","readAsBinaryString","Button","filename","csvContent","csvRows","unshift","convertTransactionRowIntoCSVRows","values","join","link","document","createElement","setAttribute","click","remove","currentPricesSlice","createSlice","name","initialState","reducers","updateCurrentPrices","state","action","payload","forEach","key","selectCurrentPrices","currentPrices","actions","transactionsSlice","transactions","summaryData","dollarCostAveragesTransactions","dollarCostAveragesSummary","dollarCostAveragesProfitsSummary","profits","notSoldAmount","addTransaction","id","defaultITransaction","now","bulkAddTransactions","transaction","deleteAllTransactions","updateTransaction","orig","update","undefined","removeTransaction","updateDollarCostAverageTransactions","updateDollarCostAverageSummary","updateDollarCostAverageProfitSummary","selectTransactions","transactionsData","selectDCASummaries","selectDCAProfitSummary","selectDCATransactionsMemoized","createSelector","sort","a","b","dcaTransactions","sellsMap","Map","isBuy","sells","sellsListForSymbol","get","set","dcaTransaction","buy","sell","pop","amountApplied","selectDCATransactionsAmountRemaining","transactionsAmountLeft","buyUUID","sellEntry","sellUUID","DashboardTD","textAlign","formatter","DollarCostAverages","dcaSummaries","dcaProfitSummary","currentValueSum","unrealizedProfitsSum","allTimeProfitsSum","dashboard","currentPrice","currentValue","dca","unrealizedProfits","addToSumMap","sum","summarizeProfitsFromDollarCostAverageTransactions","symbolToSpendingsSumMap","symbolToEarningsSumMap","symbolToAmountNotSoldMap","keys","buyId","sellIds","amountNotSold","amountSold","sellId","returns","symbolToProfitsSumMap","profitSummary","firebaseConfig","apiKey","firebaseWebConfig","authDomain","databaseURL","storageBucket","app","initializeApp","database","getDatabase","App","dispatch","useDispatch","dcaTransactionsRemaining","useEffect","dbRef","ref","unsubscribe","onValue","snapshot","exists","cryptoPrices","cryptos","console","log","dcaSummary","symbolToAmountsSumMap","symbolToWeightedSumMap","amountSum","weightedSum","dcaPrice","summarizeDollarCostAverageTransactions","height","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47cd2be9.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { ITransaction } from '../model/ITransaction';\r\n\r\nexport function createCSV(rows: string[][]) {\r\n  let csvContent =\r\n    'data:text/csv;charset=utf-8,' + rows.map((e) => e.join(',')).join('\\n');\r\n  return csvContent;\r\n}\r\n\r\nexport function convertTransactionRowIntoCSVRows(dataRows: ITransaction[]) {\r\n  const csvRows = dataRows.map((dataRow) => {\r\n    const row: string[] = [];\r\n    row.push(dataRow.symbol);\r\n    row.push(dataRow.date.toString());\r\n    row.push(dataRow.amount.toString());\r\n    row.push(dataRow.price.toString());\r\n    return row;\r\n  });\r\n  const headerRow = ['symbol', 'date', 'amount', 'price'];\r\n  csvRows.unshift(headerRow);\r\n  return csvRows;\r\n}\r\n\r\nexport function convertCSVRowIntoTransactionRow(csvRow: string[]) {\r\n  const symbol = csvRow[0];\r\n  const date: number = parseInt(csvRow[1]);\r\n  const amount: number = parseFloat(csvRow[2]);\r\n  const price:number = parseFloat(csvRow[3]);\r\n  const result: ITransaction = {\r\n    symbol: symbol,\r\n    date: !isNaN(date) ? date : -1,\r\n    amount: !isNaN(amount) ? amount : -1,\r\n    price: !isNaN(price) ? price : -1,\r\n  };\r\n  return result;\r\n}\r\n","import { getDateinDDFormat, getMonthInMMFormat } from '../utilities/date-utils'\r\n\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\r\n\r\nexport interface DatePickerWrapperProps {\r\n    value: number;\r\n    onChange: (date: number) => void;\r\n}\r\n\r\nexport function DatePickerWrapper(props: DatePickerWrapperProps) {\r\n    function convertDateMsToString(ms: number) {\r\n        const date = new Date(ms);\r\n        const MM = getMonthInMMFormat(date.getMonth());\r\n        const dd = getDateinDDFormat(date.getDate())\r\n        const retVal = MM + \"/\" + dd + \"/\" + date.getFullYear().toString();\r\n        return retVal;\r\n    }\r\n\r\n    function handleChange(date: MaterialUiPickersDate) {\r\n        if (date) {\r\n            props.onChange(date.getTime());\r\n        }\r\n    }\r\n\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n            margin=\"normal\"\r\n            format=\"MM/dd/yyyy\"\r\n            value={convertDateMsToString(props.value)}\r\n            onChange={handleChange}\r\n            variant=\"dialog\"\r\n            KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n            }}\r\n        />\r\n    </MuiPickersUtilsProvider>\r\n}","export const MILLIS_PER_WEEK = 1000 * 60 * 60 * 24 * 7;\r\n\r\nexport function getMonthInMMFormat(month: number) {\r\n  const actualMonth = month + 1;\r\n  if (actualMonth < 10) {\r\n    return '0' + actualMonth.toString();\r\n  } else {\r\n    return actualMonth.toString();\r\n  }\r\n}\r\nexport function getDateinDDFormat(date: number) {\r\n  if (date < 10) {\r\n    return '0' + date.toString();\r\n  } else {\r\n    return date.toString();\r\n  }\r\n}\r\nexport function compareDates(a: Date, b: Date) {\r\n  let compare = a.getFullYear() - b.getFullYear();\r\n  if (compare === 0) {\r\n    compare = a.getMonth() - b.getMonth();\r\n  }\r\n  if (compare === 0) {\r\n    compare = a.getDate() - b.getDate();\r\n  }\r\n  return compare;\r\n}\r\n","export function formatWithCommas(formatter: Intl.NumberFormat, val: number) {\r\n  formatter.format(val);\r\n}\r\n\r\nexport function roundDecimalPlaces(val: number, decimalPlaces: number) {\r\n  return (\r\n    Math.round((val + Number.EPSILON) * Math.pow(10, decimalPlaces)) /\r\n    Math.pow(10, decimalPlaces)\r\n  );\r\n}\r\n\r\n/**\r\n * Formats dollars into strings\r\n * @param val \r\n */\r\nexport function formatDollarAmount (val: number) : string{\r\n  if (val === 0) {\r\n    return \"-\"\r\n  }\r\n  // round to nearest significant figures for really small decimals\r\n  else if (val > -1 && val < 1){\r\n    return \"$\" + truncateSignificantFigures(val,4);\r\n  }\r\n  else {\r\n    return \"$\" + val.toFixed(2);\r\n  }\r\n}\r\n\r\n/**\r\n * For numbers between -1 and 1, truncating to nearest significant figures makes the most sense\r\n * \r\n * @param val \r\n * @param sigFigs \r\n * @returns \r\n */\r\nfunction truncateSignificantFigures(val: number, sigFigs: number){\r\n  const str = val.toString();\r\n  let newStr = \"\";\r\n  let sigFigCount = 0;\r\n  for (let char of str){\r\n    if (sigFigCount < sigFigs){\r\n      if (char === \".\" || (sigFigCount === 0 && char === \"0\")){\r\n        newStr = newStr.concat(char);\r\n      }\r\n      else {\r\n        newStr = newStr.concat(char);\r\n        sigFigCount++;\r\n      }\r\n    }\r\n  }\r\n  return newStr;\r\n}\r\n","import { useState } from 'react';\r\n\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nimport { DatePickerWrapper } from './DatePickerWrapper';\r\nimport { ITransaction } from '../model/ITransaction';\r\nimport { roundDecimalPlaces } from '../utilities/number-utils';\r\n\r\nexport interface IDataRowProps {\r\n    uuid: string;\r\n    data: ITransaction;\r\n    isUsed: boolean;\r\n    updateRow: (id: string, row: Partial<ITransaction>) => void;\r\n    deleteRow: (id: string) => void;\r\n}\r\nexport function DataRow(props: IDataRowProps) {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    // variables for editing\r\n    const [symbol, setSymbol] = useState(props.data.symbol);\r\n    const [date, setDate] = useState(props.data.date);\r\n    const [amount, setAmount] = useState(props.data.amount);\r\n    const [price, setPrice] = useState(props.data.price);\r\n\r\n    const dateTime = new Date(props.data.date);\r\n    const commaFormatter = new Intl.NumberFormat('en-US');\r\n\r\n    // styles\r\n    const buySell = props.data.amount === 0 ? \"neither\" : props.data.amount > 0 ? \"buy\" : \"sell\";\r\n    const textColor = buySell === \"buy\" ? \"red\" : buySell === \"sell\" ? \"green\" : \"black\";\r\n    const strikeThrough = props.isUsed ? \"line-through\" : \"none\";\r\n\r\n    function toggleIsEditing() {\r\n        setIsEditing(!isEditing);\r\n    }\r\n    function onSave() {\r\n        props.updateRow(props.uuid, {\r\n            symbol: symbol,\r\n            date: date,\r\n            amount: amount,\r\n            price: price,\r\n        })\r\n        toggleIsEditing();\r\n    }\r\n\r\n    return <TableRow>\r\n        <TableCell >\r\n            {!isEditing ?\r\n                <EditIcon onClick={(e) => { toggleIsEditing() }} /> :\r\n                <SaveIcon onClick={(e) => onSave()} />\r\n            }\r\n        </TableCell>\r\n        <TableCell style={{ minWidth: 80, textDecoration: strikeThrough }}>\r\n            {!isEditing ?\r\n                props.data.symbol :\r\n                <TextField value={symbol} onChange={(e) => setSymbol(e.target.value)} variant=\"outlined\" inputProps={{ style: { minWidth: '60' } }}></TextField>\r\n            }\r\n        </TableCell>\r\n        <TableCell >\r\n            {!isEditing ?\r\n                dateTime.toLocaleDateString() + \" \" + dateTime.toLocaleTimeString() :\r\n                <div style={{ minWidth: 140 }}><DatePickerWrapper value={props.data.date} onChange={(date: number) => setDate(date)} ></DatePickerWrapper></div>\r\n            }\r\n        </TableCell>\r\n        <TableCell style={{ color: textColor }}>\r\n            {!isEditing ?\r\n                props.data.amount :\r\n                <TextField type=\"number\" value={amount}\r\n                    onChange={(e) => {\r\n                        const amount = parseFloat(e.target.value);\r\n                        if (amount) setAmount(amount);\r\n                    }}\r\n                    inputProps={{ style: { color: textColor } }}\r\n                    style={{ minWidth: 100 }}\r\n                    variant=\"outlined\"\r\n                ></TextField>\r\n            }\r\n        </TableCell>\r\n        <TableCell style={{ color: textColor }}>\r\n            {!isEditing ?\r\n                (\"$\" + commaFormatter.format(props.data.price)) :\r\n                <TextField type=\"number\" value={price}\r\n                    onChange={(e) => {\r\n                        const price = parseFloat(e.target.value);\r\n                        if (price) setPrice(price);\r\n                    }}\r\n                    inputProps={{ style: { color: textColor } }}\r\n                    style={{ minWidth: 100 }}\r\n                    variant=\"outlined\"\r\n                ></TextField>\r\n            }\r\n        </TableCell>\r\n        <TableCell style={{ color: textColor }}>\r\n            {!isEditing ?\r\n                (\"$\" + commaFormatter.format(roundDecimalPlaces(props.data.price * props.data.amount, 2))) :\r\n                (\"$\" + commaFormatter.format(roundDecimalPlaces(price * amount, 2)))\r\n            }\r\n        </TableCell>\r\n        <TableCell onClick={() => props.deleteRow(props.uuid)}><DeleteIcon /></TableCell>\r\n    </TableRow >\r\n}","import { TextField } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport { ITransaction } from '../model/ITransaction';\r\n\r\nexport interface DataTableHeadProps {\r\n    title: string;\r\n    addRow: (data?: ITransaction) => void;\r\n}\r\nexport function DataTableHead(props: DataTableHeadProps) {\r\n    function handleAddRow() {\r\n        props.addRow();\r\n    }\r\n\r\n    return <div >\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12} sm={1}>\r\n                {/* Spacing */}\r\n            </Grid>\r\n            <Grid item xs={12} sm={3}>\r\n                <h2>{props.title}</h2>\r\n            </Grid>\r\n            <Grid item xs={12} sm={3}>\r\n                {/* Spacing */}\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n                <h2><SearchIcon /><TextField disabled={true}></TextField></h2>\r\n            </Grid>\r\n            <Grid item xs={12} sm={1}>\r\n                <h2><AddCircleOutlineIcon onClick={handleAddRow} /></h2>\r\n            </Grid>\r\n            <Grid item xs={12} sm={1}>\r\n                {/* Spacing */}\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { parse } from 'papaparse';\r\n\r\nimport { ITransaction } from '../model/ITransaction';\r\nimport { convertCSVRowIntoTransactionRow, convertTransactionRowIntoCSVRows, createCSV } from '../utilities/csv-utils'\r\nimport { DataRow } from './DataRow';\r\nimport { DataTableHead } from './DataTableHead';\r\n\r\nexport interface ITableProps {\r\n    title: string;\r\n    data: { [id: string]: ITransaction; }\r\n    dcaData: { [id: string]: number };\r\n    addRow: (data?: ITransaction) => void;\r\n    updateRow: (id: string, row: Partial<ITransaction>) => void;\r\n    deleteRow: (id: string) => void;\r\n    onImportComplete: (data: ITransaction[]) => void;\r\n}\r\nexport function DataTable(props: ITableProps) {\r\n\r\n    function handleImport(e: React.ChangeEvent<HTMLInputElement>) {\r\n        if (e.target.files) {\r\n            const file = e.target.files[0];\r\n            const reader = new FileReader();\r\n            reader.onload = (evt) => {\r\n                /* Parse data */\r\n                const bstr = evt.target?.result;\r\n                if (bstr) {\r\n                    const rows = parse(bstr.toString());\r\n                    const dataRows: ITransaction[] = []\r\n                    for (let i = 1; i < rows.data.length; i++) {\r\n                        const row = rows.data[i] as string[];\r\n                        const dataRow = convertCSVRowIntoTransactionRow(row);\r\n                        dataRows.push(dataRow);\r\n                    }\r\n                    props.onImportComplete(dataRows);\r\n                }\r\n            };\r\n            reader.readAsBinaryString(file);\r\n        }\r\n    }\r\n    function handleExport() {\r\n        const filename = props.title;\r\n        const csvRows = convertTransactionRowIntoCSVRows(Object.values(props.data));\r\n        const csvContent = createCSV(csvRows);\r\n        const link = document.createElement('a');\r\n        link.setAttribute('href', csvContent);\r\n        link.setAttribute('download', filename + \".csv\");\r\n        link.click();\r\n        link.remove();\r\n    }\r\n\r\n    return <div>\r\n        <TableContainer component={Paper} >\r\n            <DataTableHead title={props.title} addRow={props.addRow} />\r\n            <div style={{ maxHeight: 400, overflowX: 'auto' }}>\r\n                <Table stickyHeader>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            <TableCell>Symbol </TableCell>\r\n                            <TableCell>Date</TableCell>\r\n                            <TableCell>Amount</TableCell>\r\n                            <TableCell>Price</TableCell>\r\n                            <TableCell>Total</TableCell>\r\n                            <TableCell></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody >\r\n                        {Object.entries(props.data).map((entry) => {\r\n                            const uuid = entry[0];\r\n                            const row = entry[1];\r\n                            const amountRemaining = props.dcaData[uuid];\r\n                            const isUsed = amountRemaining === 0 ? true : false;\r\n                            return <DataRow key={uuid} uuid={uuid} data={row} isUsed={isUsed} updateRow={props.updateRow} deleteRow={props.deleteRow} />\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </TableContainer>\r\n        <div>\r\n            <input type=\"file\" accept=\".csv\" onChange={handleImport} />\r\n            <Button onClick={handleExport}>Export</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\nimport { CryptoDictionary } from '../firebase/firebase';\r\n\r\nconst initialState: CryptoDictionary = {};\r\n\r\nexport const currentPricesSlice = createSlice({\r\n  name: 'currentPrices',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    updateCurrentPrices: (state, action: PayloadAction<CryptoDictionary>) => {\r\n      Object.entries(action.payload).forEach((entry) => {\r\n        const key = entry[0];\r\n        const value = entry[1];\r\n        state[key] = value;\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectCurrentPrices = (state: RootState) => state.currentPrices;\r\n\r\nexport const { updateCurrentPrices } = currentPricesSlice.actions;\r\n\r\nexport default currentPricesSlice.reducer;\r\n","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../app/store';\r\nimport { uuid } from 'uuidv4';\r\nimport { isBuy, ITransaction, ITransactionAndId } from '../model/ITransaction';\r\nimport {\r\n  IDollarCostAverageProfitSummary,\r\n  IDollarCostAverageSummary,\r\n  IDollarCostAverageTransactions,\r\n} from '../model/IDollarCostAverage';\r\n\r\nexport interface TranscationsState {\r\n  transactions: {\r\n    [id: string]: ITransaction;\r\n  };\r\n  summaryData: {\r\n    dollarCostAveragesTransactions: IDollarCostAverageTransactions;\r\n    dollarCostAveragesSummary: IDollarCostAverageSummary;\r\n    dollarCostAveragesProfitsSummary: IDollarCostAverageProfitSummary;\r\n  };\r\n}\r\n\r\nconst initialState: TranscationsState = {\r\n  transactions: {},\r\n  summaryData: {\r\n    dollarCostAveragesTransactions: {},\r\n    dollarCostAveragesSummary: {},\r\n    dollarCostAveragesProfitsSummary: {\r\n      profits: {},\r\n      notSoldAmount: {},\r\n    },\r\n  },\r\n};\r\n\r\nexport const transactionsSlice = createSlice({\r\n  name: 'transactionsData',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    addTransaction: (state, action: PayloadAction<ITransaction | null>) => {\r\n      const id = uuid();\r\n      if (action.payload) {\r\n        state.transactions[id] = action.payload;\r\n      } else {\r\n        const defaultITransaction: ITransaction = {\r\n          symbol: '',\r\n          date: Date.now(),\r\n          amount: 0,\r\n          price: 0,\r\n        };\r\n        state.transactions[id] = defaultITransaction;\r\n      }\r\n    },\r\n    bulkAddTransactions: (state, action: PayloadAction<ITransaction[]>) => {\r\n      action.payload.forEach((transaction) => {\r\n        const id = uuid();\r\n        state.transactions[id] = transaction;\r\n      });\r\n    },\r\n    deleteAllTransactions: (state) => {\r\n      state.transactions = {};\r\n    },\r\n    updateTransaction: (\r\n      state,\r\n      action: PayloadAction<{ id: string; transaction: Partial<ITransaction> }>\r\n    ) => {\r\n      const orig = state.transactions[action.payload.id];\r\n      const update = action.payload.transaction;\r\n      // hard-code the updated fields\r\n      if (update.amount !== undefined) orig.amount = update.amount;\r\n      if (update.date !== undefined) orig.date = update.date;\r\n      if (update.price !== undefined) orig.price = update.price;\r\n      if (update.symbol !== undefined) orig.symbol = update.symbol;\r\n    },\r\n    removeTransaction: (state, action: PayloadAction<{ id: string }>) => {\r\n      delete state.transactions[action.payload.id];\r\n    },\r\n    updateDollarCostAverageTransactions: (\r\n      state,\r\n      action: PayloadAction<IDollarCostAverageTransactions>\r\n    ) => {\r\n      state.summaryData.dollarCostAveragesTransactions = action.payload;\r\n    },\r\n    updateDollarCostAverageSummary: (\r\n      state,\r\n      action: PayloadAction<IDollarCostAverageSummary>\r\n    ) => {\r\n      state.summaryData.dollarCostAveragesSummary = action.payload;\r\n    },\r\n    updateDollarCostAverageProfitSummary: (\r\n      state,\r\n      action: PayloadAction<IDollarCostAverageProfitSummary>\r\n    ) => {\r\n      state.summaryData.dollarCostAveragesProfitsSummary = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTransaction,\r\n  bulkAddTransactions,\r\n  deleteAllTransactions,\r\n  updateTransaction,\r\n  removeTransaction,\r\n  updateDollarCostAverageTransactions,\r\n  updateDollarCostAverageSummary,\r\n  updateDollarCostAverageProfitSummary,\r\n} = transactionsSlice.actions;\r\n\r\nexport const selectTransactions = (state: RootState) =>\r\n  state.transactionsData.transactions;\r\nexport const selectDCASummaries = (state: RootState) =>\r\n  state.transactionsData.summaryData.dollarCostAveragesSummary;\r\nexport const selectDCATransactions = (state: RootState) =>\r\n  state.transactionsData.summaryData.dollarCostAveragesTransactions;\r\nexport const selectDCAProfitSummary = (state: RootState) =>\r\n  state.transactionsData.summaryData.dollarCostAveragesProfitsSummary;\r\n\r\nexport const selectDCATransactionsMemoized = createSelector(\r\n  [selectTransactions],\r\n  (transactionsData) => {\r\n    // deep copy transactions map to a list\r\n    const transactions: ITransactionAndId[] = Object.entries(\r\n      transactionsData\r\n    ).map((entry) => {\r\n      return {\r\n        id: entry[0],\r\n        amount: entry[1].amount,\r\n        date: entry[1].date,\r\n        price: entry[1].price,\r\n        symbol: entry[1].symbol,\r\n      };\r\n    });\r\n\r\n    // sort transactions by date\r\n    transactions.sort((a, b) => a.date - b.date);\r\n\r\n    /** Map containing buys */\r\n    const dcaTransactions: IDollarCostAverageTransactions = {};\r\n    /** Map containing symbols to \"sell transactions\" sorted by date */\r\n    const sellsMap: Map<string, ITransactionAndId[]> = new Map();\r\n    transactions.forEach((transaction) => {\r\n      if (isBuy(transaction)) {\r\n        dcaTransactions[transaction.id] = {\r\n          result: {\r\n            amount: transaction.amount,\r\n            date: transaction.date,\r\n            price: transaction.price,\r\n            symbol: transaction.symbol,\r\n          },\r\n          sells: {},\r\n        };\r\n      } else {\r\n        let sellsListForSymbol = sellsMap.get(transaction.symbol);\r\n        if (!sellsListForSymbol) sellsListForSymbol = [];\r\n        sellsListForSymbol.push(transaction);\r\n        sellsMap.set(transaction.symbol, sellsListForSymbol);\r\n      }\r\n    });\r\n\r\n    // apply all possible sells to each buy\r\n    const buys = Object.values(dcaTransactions);\r\n    buys.forEach((dcaTransaction) => {\r\n      const buy = dcaTransaction.result;\r\n      // look up based on the symbol\r\n      const symbol = buy.symbol;\r\n      const sells = sellsMap.get(symbol);\r\n      // apply as many sells as possible to each buy\r\n      while (sells && sells.length !== 0 && buy.amount !== 0) {\r\n        const sell = sells.pop();\r\n        if (sell) {\r\n          let amountApplied = 0;\r\n          // apply all of the sell to buy\r\n          if (-1 * sell.amount <= buy.amount) {\r\n            amountApplied = sell.amount;\r\n            buy.amount += sell.amount;\r\n            sell.amount = 0;\r\n          }\r\n          // apply partial sell to buy\r\n          else {\r\n            amountApplied = -1 * buy.amount;\r\n            sell.amount += buy.amount;\r\n            buy.amount = 0;\r\n            // push the sell back on to use for other buys\r\n            sells.push(sell);\r\n          }\r\n          dcaTransaction.sells[sell.id] = {\r\n            amount: amountApplied,\r\n            date: sell.date,\r\n            price: sell.price,\r\n            symbol: sell.symbol,\r\n          };\r\n        }\r\n      }\r\n    });\r\n    return dcaTransactions;\r\n  }\r\n);\r\n\r\nexport const selectDCATransactionsAmountRemaining = createSelector(\r\n  [selectDCATransactionsMemoized],\r\n  (dcaTransactions) => {\r\n    // flatten out the transactions to be easily accessible\r\n    const transactionsAmountLeft: { [id: string]: number } = {};\r\n    const entries = Object.entries(dcaTransactions);\r\n    entries.forEach((entry) => {\r\n      const buyUUID = entry[0];\r\n      transactionsAmountLeft[buyUUID] = entry[1].result.amount;\r\n      const sellEntries = Object.entries(entry[1].sells);\r\n      sellEntries.forEach((sellEntry) => {\r\n        const sellUUID = sellEntry[0];\r\n        transactionsAmountLeft[sellUUID] = sellEntry[1].amount;\r\n      });\r\n    });\r\n    return transactionsAmountLeft;\r\n  }\r\n);\r\n\r\nexport default transactionsSlice.reducer;\r\n","export interface ITransaction {\r\n  date: number;\r\n  symbol: string;\r\n  amount: number;\r\n  price: number;\r\n}\r\n\r\nexport function isBuy(transaction: ITransaction) {\r\n  if (transaction.amount > 0) return true;\r\n  else return false;\r\n}\r\n\r\n/** Extends the ITransaction interface to add an id field */\r\nexport interface ITransactionAndId extends ITransaction {\r\n  id: string;\r\n}\r\n","export interface IDashboardTD{\r\n    value: number;\r\n    formatter: (value: number) => string;\r\n}\r\nexport function DashboardTD (props: IDashboardTD){\r\n    const computeTextStyle = (val: number) => {\r\n        if (val < 0) return \"red\";\r\n        else if (val > 0) return \"green\";\r\n        else return \"black\";\r\n    }\r\n    return <td style={{textAlign: \"right\", color: computeTextStyle(props.value)}}>{props.value === 0.0 ? \"-\" : props.formatter(props.value) }</td>\r\n\r\n}\r\n","import { useAppSelector } from \"../app/hooks\";\r\nimport { selectCurrentPrices } from \"../slices/currentPricesSlice\";\r\nimport { selectDCAProfitSummary, selectDCASummaries } from \"../slices/transactionsSlice\";\r\nimport { formatDollarAmount } from \"../utilities/number-utils\";\r\nimport { DashboardTD } from \"./DashboardTD\";\r\n\r\nexport function DollarCostAverages() {\r\n    const dcaSummaries = useAppSelector(selectDCASummaries);\r\n    const dcaProfitSummary = useAppSelector(selectDCAProfitSummary);\r\n    const currentPrices = useAppSelector(selectCurrentPrices);\r\n\r\n    let currentValueSum = 0;\r\n    let unrealizedProfitsSum = 0;\r\n    let allTimeProfitsSum = 0;\r\n    const dashboard = Object.entries(dcaProfitSummary.profits).map((entry) => {\r\n        const symbol = entry[0];\r\n        const profits = entry[1];\r\n        const amount: number = dcaProfitSummary.notSoldAmount[symbol] ? dcaProfitSummary.notSoldAmount[symbol] : 0;\r\n        const currentPrice: number | undefined = currentPrices[symbol];\r\n        const currentValue = (currentPrice && amount) ? currentPrice * amount : 0;\r\n        const dca = dcaSummaries[symbol] ? dcaSummaries[symbol].price : 0;\r\n        const totalCost = dca * amount;\r\n        const potentialEarnings = currentPrice * amount;\r\n        const unrealizedProfits = potentialEarnings - totalCost;\r\n\r\n        // update running totals\r\n        currentValueSum+= currentValue;\r\n        unrealizedProfitsSum += unrealizedProfits;\r\n        allTimeProfitsSum += profits;\r\n\r\n        return <tr key={\"dashboard-\" + symbol}>\r\n            <td>{symbol}</td>\r\n            <DashboardTD value={currentValue} formatter={formatDollarAmount}></DashboardTD>\r\n            <DashboardTD value={amount} formatter={(val) => val.toFixed(2)}></DashboardTD>\r\n            <DashboardTD value={currentPrice} formatter={formatDollarAmount}></DashboardTD>\r\n            <DashboardTD value={dca} formatter={formatDollarAmount}></DashboardTD>\r\n            <DashboardTD value={(currentPrice && dca) ? ((currentPrice - dca) / dca * 100) : 0.0} formatter={(val) => val.toFixed(2) + \"%\"}></DashboardTD>\r\n            <DashboardTD value={unrealizedProfits} formatter={formatDollarAmount}></DashboardTD>\r\n            <DashboardTD value={profits} formatter={formatDollarAmount}></DashboardTD>\r\n        </tr>\r\n    });\r\n\r\n    return <div>\r\n        <h1 style={{textAlign: \"center\"}}>Dashboard</h1>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Symbol</th><th>Current Value</th><th>Amount</th><th>Current Price</th><th>Dollar Cost Average</th><th>% Return</th><th>Unrealized Profits</th><th>All Time Profits</th>\r\n                </tr>\r\n            </thead>\r\n            {dashboard}\r\n            <tfoot>\r\n                <tr>\r\n                    <td>Total</td>\r\n                    <DashboardTD value={currentValueSum} formatter={formatDollarAmount}></DashboardTD>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <DashboardTD value={unrealizedProfitsSum} formatter={formatDollarAmount}></DashboardTD>\r\n                    <DashboardTD value={allTimeProfitsSum} formatter={formatDollarAmount}></DashboardTD>\r\n                </tr>\r\n            </tfoot>\r\n\r\n        </table>\r\n    </div>\r\n}","import {\r\n  IDollarCostAverageProfitSummary,\r\n  IDollarCostAverageSummary,\r\n  IDollarCostAverageTransactions,\r\n} from '../model/IDollarCostAverage';\r\nimport { ITransaction } from '../model/ITransaction';\r\n\r\nfunction addToSumMap(map: Map<string, number>, symbol: string, amount: number) {\r\n  let sum = map.get(symbol);\r\n  if (!sum) sum = 0;\r\n  sum += amount;\r\n  map.set(symbol, sum);\r\n}\r\n\r\nexport function summarizeDollarCostAverageTransactions(\r\n  dcaTransactions: IDollarCostAverageTransactions\r\n) {\r\n  // sum up the amount left per symbol\r\n  const symbolToAmountsSumMap: Map<string, number> = new Map<string, number>();\r\n  // sum up the (amount * price) left per symbol for a weighted sum\r\n  const symbolToWeightedSumMap: Map<string, number> = new Map<string, number>();\r\n  Object.keys(dcaTransactions).forEach((buyId) => {\r\n    const buy = dcaTransactions[buyId];\r\n    if (buy.result.amount !== 0) {\r\n      const symbol = buy.result.symbol;\r\n      addToSumMap(symbolToAmountsSumMap, symbol, buy.result.amount);\r\n      addToSumMap(\r\n        symbolToWeightedSumMap,\r\n        symbol,\r\n        buy.result.amount * buy.result.price\r\n      );\r\n    }\r\n  });\r\n\r\n  const dcaSummary: IDollarCostAverageSummary = {};\r\n  symbolToAmountsSumMap.forEach((amountSum, symbol) => {\r\n    const weightedSum = symbolToWeightedSumMap.get(symbol);\r\n    if (weightedSum) {\r\n      const dcaPrice = weightedSum / amountSum;\r\n      dcaSummary[symbol] = {\r\n        symbol: symbol,\r\n        price: dcaPrice,\r\n      };\r\n    }\r\n  });\r\n  return dcaSummary;\r\n}\r\n\r\nexport function summarizeProfitsFromDollarCostAverageTransactions(\r\n  dcaTransactions: IDollarCostAverageTransactions,\r\n  transactionsData: { [id: string]: ITransaction }\r\n) {\r\n  const symbolToSpendingsSumMap: Map<string, number> = new Map<\r\n    string,\r\n    number\r\n  >();\r\n  const symbolToEarningsSumMap: Map<string, number> = new Map<string, number>();\r\n  const symbolToAmountNotSoldMap: Map<string, number> = new Map<\r\n    string,\r\n    number\r\n  >();\r\n  Object.keys(dcaTransactions).forEach((buyId) => {\r\n    const buy = dcaTransactions[buyId];\r\n    const symbol = buy.result.symbol;\r\n    const sellIds = Object.keys(buy.sells);\r\n\r\n    const amountNotSold = buy.result.amount;\r\n    const amountSold = transactionsData[buyId].amount - amountNotSold;\r\n\r\n    // sum up how much was bought but not sold\r\n    if (amountNotSold !== 0) {\r\n      addToSumMap(symbolToAmountNotSoldMap, symbol, amountNotSold);\r\n    }\r\n    // sum up how much was bought and sold\r\n    addToSumMap(\r\n      symbolToSpendingsSumMap,\r\n      symbol,\r\n      amountSold * transactionsData[buyId].price\r\n    );\r\n    sellIds.forEach((sellId) => {\r\n      const sell = buy.sells[sellId];\r\n      // sum up returns\r\n      const returns = -1 * sell.amount * sell.price;\r\n      // add to earnings\r\n      addToSumMap(symbolToEarningsSumMap, symbol, returns);\r\n    });\r\n  });\r\n\r\n  // combine\r\n  const symbolToProfitsSumMap: Map<string, number> = new Map<string, number>();\r\n  symbolToSpendingsSumMap.forEach((val, key) =>\r\n    addToSumMap(symbolToProfitsSumMap, key, -1 * val)\r\n  );\r\n  symbolToEarningsSumMap.forEach((val, key) =>\r\n    addToSumMap(symbolToProfitsSumMap, key, val)\r\n  );\r\n\r\n  // return\r\n  const profitSummary: IDollarCostAverageProfitSummary = {\r\n    profits: {},\r\n    notSoldAmount: {},\r\n  };\r\n  symbolToProfitsSumMap.forEach(\r\n    (val, key) => (profitSummary.profits[key] = val)\r\n  );\r\n  symbolToAmountNotSoldMap.forEach(\r\n    (val, key) => (profitSummary.notSoldAmount[key] = val)\r\n  );\r\n  return profitSummary;\r\n}\r\n","import { initializeApp } from 'firebase/app';\r\nimport { getDatabase } from 'firebase/database';\r\nimport * as firebaseWebConfig from '../config/firebase.config.json';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: firebaseWebConfig.apiKey,\r\n  authDomain: firebaseWebConfig.authDomain,\r\n  databaseURL: firebaseWebConfig.databaseURL,\r\n  storageBucket: firebaseWebConfig.storageBucket,\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Get a reference to the database service\r\nexport const database = getDatabase(app);\r\n\r\nexport interface CryptoDictionary {\r\n  [symbol: string]: number;\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from './app/hooks';\r\nimport { DataTable } from './components/DataTable';\r\nimport { DollarCostAverages } from './components/DollarCostAverages';\r\nimport { ITransaction } from './model/ITransaction';\r\nimport { addTransaction, bulkAddTransactions, deleteAllTransactions, removeTransaction, selectDCATransactionsAmountRemaining, selectDCATransactionsMemoized, selectTransactions, updateDollarCostAverageProfitSummary, updateDollarCostAverageSummary, updateDollarCostAverageTransactions, updateTransaction } from './slices/transactionsSlice';\r\nimport { summarizeDollarCostAverageTransactions, summarizeProfitsFromDollarCostAverageTransactions } from './utilities/transaction-utils';\r\nimport { updateCurrentPrices } from './slices/currentPricesSlice';\r\n\r\nimport { onValue, ref } from 'firebase/database';\r\nimport { CryptoDictionary, database } from './firebase/firebase';\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const transactions = useAppSelector(selectTransactions);\r\n  const dcaTransactions = useAppSelector(selectDCATransactionsMemoized);\r\n  const dcaTransactionsRemaining = useAppSelector(selectDCATransactionsAmountRemaining);\r\n\r\n  function handleCreateTransaction(transaction?: ITransaction) {\r\n    dispatch(addTransaction(transaction ? transaction : null));\r\n  }\r\n\r\n  function handleUpdateTransaction(id: string, transaction: Partial<ITransaction>) {\r\n    dispatch(updateTransaction({ id: id, transaction: transaction }));\r\n  }\r\n\r\n  function handleDeleteTransaction(id: string) {\r\n    dispatch(removeTransaction({ id: id }));\r\n  }\r\n\r\n  function handleImportTransactionsComplete(transactions: ITransaction[]) {\r\n    dispatch(deleteAllTransactions());\r\n    dispatch(bulkAddTransactions(transactions));\r\n  }\r\n\r\n  // on open, fetch current prices\r\n  useEffect(() => {\r\n\r\n    const dbRef = ref(database);\r\n\r\n    // subscribe\r\n    const unsubscribe = onValue(dbRef, (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        const cryptoPrices = snapshot.val().cryptos as CryptoDictionary;\r\n        console.log(cryptoPrices);\r\n\r\n        dispatch(updateCurrentPrices(cryptoPrices));\r\n      } else {\r\n        console.log('No data available');\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n  }, [dispatch])\r\n\r\n  // leverage React to listen to changes in state and convert to chart data accordingly\r\n  useEffect(() => {\r\n    const dcaSummary = summarizeDollarCostAverageTransactions(dcaTransactions);\r\n    const dcaProfitSummary = summarizeProfitsFromDollarCostAverageTransactions(dcaTransactions, transactions);\r\n    summarizeProfitsFromDollarCostAverageTransactions(dcaTransactions, transactions);\r\n    dispatch(updateDollarCostAverageTransactions(dcaTransactions));\r\n    dispatch(updateDollarCostAverageSummary(dcaSummary));\r\n    dispatch(updateDollarCostAverageProfitSummary(dcaProfitSummary));\r\n  }, [dispatch, transactions, dcaTransactions])\r\n  return (\r\n    <div>\r\n      <DollarCostAverages></DollarCostAverages>\r\n      <DataTable title=\"Cryptos\" data={transactions} dcaData={dcaTransactionsRemaining} addRow={handleCreateTransaction} updateRow={handleUpdateTransaction} deleteRow={handleDeleteTransaction} onImportComplete={handleImportTransactionsComplete} ></DataTable>\r\n      <div style={{ height: 100 }}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport currentPricesSlice from '../slices/currentPricesSlice';\r\nimport transactionsSlice from '../slices/transactionsSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    transactionsData: transactionsSlice,\r\n    currentPrices: currentPricesSlice,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !==null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}