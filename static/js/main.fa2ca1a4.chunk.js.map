{"version":3,"sources":["app/hooks.ts","utilities/csv-utils.ts","components/DatePickerWrapper.tsx","utilities/date-utils.ts","utilities/number-utils.ts","components/DataRow.tsx","components/DataTableHead.tsx","components/DataTable.tsx","slices/currentPricesSlice.ts","slices/transactionsSlice.ts","model/ITransaction.ts","components/DashboardTD.tsx","components/DollarCostAverages.tsx","firebase/firebase.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","convertCSVRowIntoTransactionRow","csvRow","symbol","date","parseInt","amount","parseFloat","price","isNaN","DatePickerWrapper","props","utils","DateFnsUtils","margin","format","value","ms","Date","month","actualMonth","toString","getMonthInMMFormat","getMonth","getDateinDDFormat","getDate","getFullYear","convertDateMsToString","onChange","getTime","variant","KeyboardButtonProps","roundDecimalPlaces","val","decimalPlaces","Math","round","Number","EPSILON","pow","formatDollarAmount","sigFigs","str","newStr","sigFigCount","char","concat","truncateSignificantFigures","toFixed","DataRow","useState","isEditing","setIsEditing","data","setSymbol","setDate","setAmount","setPrice","dateTime","commaFormatter","Intl","NumberFormat","buySell","textColor","strikeThrough","isUsed","toggleIsEditing","TableRow","TableCell","onClick","e","updateRow","uuid","style","minWidth","textDecoration","TextField","target","inputProps","toLocaleDateString","toLocaleTimeString","color","type","deleteRow","DataTableHead","container","spacing","item","xs","sm","title","disabled","addRow","DataTable","TableContainer","component","Paper","maxHeight","overflowX","Table","stickyHeader","TableHead","TableBody","Object","entries","map","entry","row","dcaData","accept","files","file","reader","FileReader","onload","evt","bstr","result","rows","parse","dataRows","i","length","dataRow","push","onImportComplete","readAsBinaryString","Button","filename","csvContent","csvRows","unshift","convertTransactionRowIntoCSVRows","values","join","link","document","createElement","setAttribute","click","remove","currentPricesSlice","createSlice","name","initialState","reducers","updateCurrentPrices","state","action","payload","forEach","key","selectCurrentPrices","currentPrices","actions","transactionsSlice","transactions","addTransaction","id","defaultITransaction","now","bulkAddTransactions","transaction","deleteAllTransactions","updateTransaction","orig","update","undefined","removeTransaction","selectTransactions","transactionsData","selectAppliedTransactions","createSelector","sort","a","b","dcaTransactions","sellsMap","Map","isBuy","sells","sellsListForSymbol","get","set","dcaTransaction","buy","sell","pop","amountApplied","selectDCATransactionsAmountRemaining","transactionsAmountLeft","buyUUID","sellEntry","sellUUID","addToSumMap","sum","selectAppliedTransactionsSummarized","symbolToAmountsSumMap","symbolToWeightedSumMap","keys","buyId","dcaSummary","amountSum","weightedSum","dcaPrice","selectAppliedTransactionsProfitSummary","symbolToSpendingsSumMap","symbolToEarningsSumMap","symbolToAmountNotSoldMap","sellIds","amountNotSold","amountSold","sellId","returns","symbolToProfitsSumMap","profitSummary","profits","notSoldAmount","DashboardTD","textAlign","formatter","DollarCostAverages","dcaSummaries","dcaProfitSummary","currentValueSum","unrealizedProfitsSum","allTimeProfitsSum","dashboard","currentPrice","currentValue","dca","unrealizedProfits","padding","marginLeft","marginRight","width","firebaseConfig","apiKey","firebaseWebConfig","authDomain","databaseURL","storageBucket","app","initializeApp","database","getDatabase","App","dispatch","useDispatch","dcaTransactionsRemaining","useEffect","dbRef","ref","unsubscribe","onValue","snapshot","exists","cryptoPrices","cryptos","console","log","height","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa2ca1a4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ITransaction } from '../model/ITransaction';\n\nexport function createCSV(rows: string[][]) {\n  let csvContent =\n    'data:text/csv;charset=utf-8,' + rows.map((e) => e.join(',')).join('\\n');\n  return csvContent;\n}\n\nexport function convertTransactionRowIntoCSVRows(dataRows: ITransaction[]) {\n  const csvRows = dataRows.map((dataRow) => {\n    const row: string[] = [];\n    row.push(dataRow.symbol);\n    row.push(dataRow.date.toString());\n    row.push(dataRow.amount.toString());\n    row.push(dataRow.price.toString());\n    return row;\n  });\n  const headerRow = ['symbol', 'date', 'amount', 'price'];\n  csvRows.unshift(headerRow);\n  return csvRows;\n}\n\nexport function convertCSVRowIntoTransactionRow(csvRow: string[]) {\n  const symbol = csvRow[0];\n  const date: number = parseInt(csvRow[1]);\n  const amount: number = parseFloat(csvRow[2]);\n  const price:number = parseFloat(csvRow[3]);\n  const result: ITransaction = {\n    symbol: symbol,\n    date: !isNaN(date) ? date : -1,\n    amount: !isNaN(amount) ? amount : -1,\n    price: !isNaN(price) ? price : -1,\n  };\n  return result;\n}\n","import { getDateinDDFormat, getMonthInMMFormat } from '../utilities/date-utils'\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\n\nexport interface DatePickerWrapperProps {\n    value: number;\n    onChange: (date: number) => void;\n}\n\nexport function DatePickerWrapper(props: DatePickerWrapperProps) {\n    function convertDateMsToString(ms: number) {\n        const date = new Date(ms);\n        const MM = getMonthInMMFormat(date.getMonth());\n        const dd = getDateinDDFormat(date.getDate())\n        const retVal = MM + \"/\" + dd + \"/\" + date.getFullYear().toString();\n        return retVal;\n    }\n\n    function handleChange(date: MaterialUiPickersDate) {\n        if (date) {\n            props.onChange(date.getTime());\n        }\n    }\n\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n            margin=\"normal\"\n            format=\"MM/dd/yyyy\"\n            value={convertDateMsToString(props.value)}\n            onChange={handleChange}\n            variant=\"dialog\"\n            KeyboardButtonProps={{\n                'aria-label': 'change date',\n            }}\n        />\n    </MuiPickersUtilsProvider>\n}","export const MILLIS_PER_WEEK = 1000 * 60 * 60 * 24 * 7;\n\nexport function getMonthInMMFormat(month: number) {\n  const actualMonth = month + 1;\n  if (actualMonth < 10) {\n    return '0' + actualMonth.toString();\n  } else {\n    return actualMonth.toString();\n  }\n}\nexport function getDateinDDFormat(date: number) {\n  if (date < 10) {\n    return '0' + date.toString();\n  } else {\n    return date.toString();\n  }\n}\nexport function compareDates(a: Date, b: Date) {\n  let compare = a.getFullYear() - b.getFullYear();\n  if (compare === 0) {\n    compare = a.getMonth() - b.getMonth();\n  }\n  if (compare === 0) {\n    compare = a.getDate() - b.getDate();\n  }\n  return compare;\n}\n","export function formatWithCommas(formatter: Intl.NumberFormat, val: number) {\n  formatter.format(val);\n}\n\nexport function roundDecimalPlaces(val: number, decimalPlaces: number) {\n  return (\n    Math.round((val + Number.EPSILON) * Math.pow(10, decimalPlaces)) /\n    Math.pow(10, decimalPlaces)\n  );\n}\n\n/**\n * Formats dollars into strings\n * @param val \n */\nexport function formatDollarAmount (val: number) : string{\n  if (val === 0) {\n    return \"-\"\n  }\n  // round to nearest significant figures for really small decimals\n  else if (val > -1 && val < 1){\n    return \"$\" + truncateSignificantFigures(val,4);\n  }\n  else {\n    return \"$\" + val.toFixed(2);\n  }\n}\n\n/**\n * For numbers between -1 and 1, truncating to nearest significant figures makes the most sense\n * \n * @param val \n * @param sigFigs \n * @returns \n */\nfunction truncateSignificantFigures(val: number, sigFigs: number){\n  const str = val.toString();\n  let newStr = \"\";\n  let sigFigCount = 0;\n  for (let char of str){\n    if (sigFigCount < sigFigs){\n      if (char === \".\" || (sigFigCount === 0 && char === \"0\")){\n        newStr = newStr.concat(char);\n      }\n      else {\n        newStr = newStr.concat(char);\n        sigFigCount++;\n      }\n    }\n  }\n  return newStr;\n}\n","import { useState } from 'react';\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { TextField } from '@material-ui/core';\n\nimport { DatePickerWrapper } from './DatePickerWrapper';\nimport { ITransaction } from '../model/ITransaction';\nimport { roundDecimalPlaces } from '../utilities/number-utils';\n\nexport interface IDataRowProps {\n    uuid: string;\n    data: ITransaction;\n    isUsed: boolean;\n    updateRow: (id: string, row: Partial<ITransaction>) => void;\n    deleteRow: (id: string) => void;\n}\nexport function DataRow(props: IDataRowProps) {\n    const [isEditing, setIsEditing] = useState(false);\n\n    // variables for editing\n    const [symbol, setSymbol] = useState(props.data.symbol);\n    const [date, setDate] = useState(props.data.date);\n    const [amount, setAmount] = useState(props.data.amount);\n    const [price, setPrice] = useState(props.data.price);\n\n    const dateTime = new Date(props.data.date);\n    const commaFormatter = new Intl.NumberFormat('en-US');\n\n    // styles\n    const buySell = props.data.amount === 0 ? \"neither\" : props.data.amount > 0 ? \"buy\" : \"sell\";\n    const textColor = buySell === \"buy\" ? \"red\" : buySell === \"sell\" ? \"green\" : \"black\";\n    const strikeThrough = props.isUsed ? \"line-through\" : \"none\";\n\n    function toggleIsEditing() {\n        setIsEditing(!isEditing);\n    }\n    function onSave() {\n        props.updateRow(props.uuid, {\n            symbol: symbol,\n            date: date,\n            amount: amount,\n            price: price,\n        })\n        toggleIsEditing();\n    }\n\n    return <TableRow>\n        <TableCell >\n            {!isEditing ?\n                <EditIcon onClick={(e) => { toggleIsEditing() }} /> :\n                <SaveIcon onClick={(e) => onSave()} />\n            }\n        </TableCell>\n        <TableCell style={{ minWidth: 80, textDecoration: strikeThrough }}>\n            {!isEditing ?\n                props.data.symbol :\n                <TextField value={symbol} onChange={(e) => setSymbol(e.target.value)} variant=\"outlined\" inputProps={{ style: { minWidth: '60' } }}></TextField>\n            }\n        </TableCell>\n        <TableCell >\n            {!isEditing ?\n                dateTime.toLocaleDateString() + \" \" + dateTime.toLocaleTimeString() :\n                <div style={{ minWidth: 140 }}><DatePickerWrapper value={props.data.date} onChange={(date: number) => setDate(date)} ></DatePickerWrapper></div>\n            }\n        </TableCell>\n        <TableCell style={{ color: textColor }}>\n            {!isEditing ?\n                props.data.amount :\n                <TextField type=\"number\" value={amount}\n                    onChange={(e) => {\n                        const amount = parseFloat(e.target.value);\n                        if (amount) setAmount(amount);\n                    }}\n                    inputProps={{ style: { color: textColor } }}\n                    style={{ minWidth: 100 }}\n                    variant=\"outlined\"\n                ></TextField>\n            }\n        </TableCell>\n        <TableCell style={{ color: textColor }}>\n            {!isEditing ?\n                (\"$\" + commaFormatter.format(props.data.price)) :\n                <TextField type=\"number\" value={price}\n                    onChange={(e) => {\n                        const price = parseFloat(e.target.value);\n                        if (price) setPrice(price);\n                    }}\n                    inputProps={{ style: { color: textColor } }}\n                    style={{ minWidth: 100 }}\n                    variant=\"outlined\"\n                ></TextField>\n            }\n        </TableCell>\n        <TableCell style={{ color: textColor }}>\n            {!isEditing ?\n                (\"$\" + commaFormatter.format(roundDecimalPlaces(-1 * (props.data.price * props.data.amount), 2))) :\n                (\"$\" + commaFormatter.format(roundDecimalPlaces(-1 * (price * amount), 2)))\n            }\n        </TableCell>\n        <TableCell onClick={() => props.deleteRow(props.uuid)}><DeleteIcon /></TableCell>\n    </TableRow >\n}","import { TextField } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { ITransaction } from '../model/ITransaction';\n\nexport interface DataTableHeadProps {\n    title: string;\n    addRow: (data?: ITransaction) => void;\n}\nexport function DataTableHead(props: DataTableHeadProps) {\n    function handleAddRow() {\n        props.addRow();\n    }\n\n    return <div >\n        <Grid container spacing={3}>\n            <Grid item xs={12} sm={1}>\n                {/* Spacing */}\n            </Grid>\n            <Grid item xs={12} sm={3}>\n                <h2>{props.title}</h2>\n            </Grid>\n            <Grid item xs={12} sm={3}>\n                {/* Spacing */}\n            </Grid>\n            <Grid item xs={12} sm={4}>\n                <h2><SearchIcon /><TextField disabled={true}></TextField></h2>\n            </Grid>\n            <Grid item xs={12} sm={1}>\n                <h2><AddCircleOutlineIcon onClick={handleAddRow} /></h2>\n            </Grid>\n            <Grid item xs={12} sm={1}>\n                {/* Spacing */}\n            </Grid>\n        </Grid>\n    </div>\n}","import React from 'react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nimport { parse } from 'papaparse';\n\nimport { ITransaction } from '../model/ITransaction';\nimport { convertCSVRowIntoTransactionRow, convertTransactionRowIntoCSVRows, createCSV } from '../utilities/csv-utils'\nimport { DataRow } from './DataRow';\nimport { DataTableHead } from './DataTableHead';\n\nexport interface ITableProps {\n    title: string;\n    data: { [id: string]: ITransaction; }\n    dcaData: { [id: string]: number };\n    addRow: (data?: ITransaction) => void;\n    updateRow: (id: string, row: Partial<ITransaction>) => void;\n    deleteRow: (id: string) => void;\n    onImportComplete: (data: ITransaction[]) => void;\n}\nexport function DataTable(props: ITableProps) {\n\n    function handleImport(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n            reader.onload = (evt) => {\n                /* Parse data */\n                const bstr = evt.target?.result;\n                if (bstr) {\n                    const rows = parse(bstr.toString());\n                    const dataRows: ITransaction[] = []\n                    for (let i = 1; i < rows.data.length; i++) {\n                        const row = rows.data[i] as string[];\n                        const dataRow = convertCSVRowIntoTransactionRow(row);\n                        dataRows.push(dataRow);\n                    }\n                    props.onImportComplete(dataRows);\n                }\n            };\n            reader.readAsBinaryString(file);\n        }\n    }\n    function handleExport() {\n        const filename = props.title;\n        const csvRows = convertTransactionRowIntoCSVRows(Object.values(props.data));\n        const csvContent = createCSV(csvRows);\n        const link = document.createElement('a');\n        link.setAttribute('href', csvContent);\n        link.setAttribute('download', filename + \".csv\");\n        link.click();\n        link.remove();\n    }\n\n    return <div>\n        <TableContainer component={Paper} >\n            <DataTableHead title={props.title} addRow={props.addRow} />\n            <div style={{ maxHeight: 400, overflowX: 'auto' }}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell>Symbol </TableCell>\n                            <TableCell>Date</TableCell>\n                            <TableCell>Amount</TableCell>\n                            <TableCell>Price</TableCell>\n                            <TableCell>Total</TableCell>\n                            <TableCell></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody >\n                        {Object.entries(props.data).map((entry) => {\n                            const uuid = entry[0];\n                            const row = entry[1];\n                            const amountRemaining = props.dcaData[uuid];\n                            const isUsed = amountRemaining === 0 ? true : false;\n                            return <DataRow key={uuid} uuid={uuid} data={row} isUsed={isUsed} updateRow={props.updateRow} deleteRow={props.deleteRow} />\n                        })}\n                    </TableBody>\n                </Table>\n            </div>\n        </TableContainer>\n        <div>\n            <input type=\"file\" accept=\".csv\" onChange={handleImport} />\n            <Button onClick={handleExport}>Export</Button>\n        </div>\n    </div>\n}\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { CryptoDictionary } from '../firebase/firebase';\n\nconst initialState: CryptoDictionary = {};\n\nexport const currentPricesSlice = createSlice({\n  name: 'currentPrices',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    updateCurrentPrices: (state, action: PayloadAction<CryptoDictionary>) => {\n      Object.entries(action.payload).forEach((entry) => {\n        const key = entry[0];\n        const value = entry[1];\n        state[key] = value;\n      });\n    },\n  },\n});\n\nexport const selectCurrentPrices = (state: RootState) => state.currentPrices;\n\nexport const { updateCurrentPrices } = currentPricesSlice.actions;\n\nexport default currentPricesSlice.reducer;\n","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { uuid } from 'uuidv4';\nimport { isBuy, ITransaction, ITransactionAndId } from '../model/ITransaction';\nimport {\n  IDollarCostAverageProfitSummary,\n  IDollarCostAverageSummary,\n  IDollarCostAverageTransactions,\n} from '../model/IDollarCostAverage';\n\nexport interface TranscationsState {\n  transactions: {\n    [id: string]: ITransaction;\n  };\n}\n\nconst initialState: TranscationsState = {\n  transactions: {},\n};\n\nexport const transactionsSlice = createSlice({\n  name: 'transactionsData',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addTransaction: (state, action: PayloadAction<ITransaction | null>) => {\n      const id = uuid();\n      if (action.payload) {\n        state.transactions[id] = action.payload;\n      } else {\n        const defaultITransaction: ITransaction = {\n          symbol: '',\n          date: Date.now(),\n          amount: 0,\n          price: 0,\n        };\n        state.transactions[id] = defaultITransaction;\n      }\n    },\n    bulkAddTransactions: (state, action: PayloadAction<ITransaction[]>) => {\n      action.payload.forEach((transaction) => {\n        const id = uuid();\n        state.transactions[id] = transaction;\n      });\n    },\n    deleteAllTransactions: (state) => {\n      state.transactions = {};\n    },\n    updateTransaction: (\n      state,\n      action: PayloadAction<{ id: string; transaction: Partial<ITransaction> }>\n    ) => {\n      const orig = state.transactions[action.payload.id];\n      const update = action.payload.transaction;\n      // hard-code the updated fields\n      if (update.amount !== undefined) orig.amount = update.amount;\n      if (update.date !== undefined) orig.date = update.date;\n      if (update.price !== undefined) orig.price = update.price;\n      if (update.symbol !== undefined) orig.symbol = update.symbol;\n    },\n    removeTransaction: (state, action: PayloadAction<{ id: string }>) => {\n      delete state.transactions[action.payload.id];\n    },\n  },\n});\n\nexport const {\n  addTransaction,\n  bulkAddTransactions,\n  deleteAllTransactions,\n  updateTransaction,\n  removeTransaction,\n} = transactionsSlice.actions;\n\nexport const selectTransactions = (state: RootState) =>\n  state.transactionsData.transactions;\n\nexport const selectAppliedTransactions = createSelector(\n  [selectTransactions],\n  (transactionsData) => {\n    // deep copy transactions map to a list\n    const transactions: ITransactionAndId[] = Object.entries(\n      transactionsData\n    ).map((entry) => {\n      return {\n        id: entry[0],\n        amount: entry[1].amount,\n        date: entry[1].date,\n        price: entry[1].price,\n        symbol: entry[1].symbol,\n      };\n    });\n\n    // sort transactions by date\n    transactions.sort((a, b) => a.date - b.date);\n\n    /** Map containing buys */\n    const dcaTransactions: IDollarCostAverageTransactions = {};\n    /** Map containing symbols to \"sell transactions\" sorted by date */\n    const sellsMap: Map<string, ITransactionAndId[]> = new Map();\n    transactions.forEach((transaction) => {\n      if (isBuy(transaction)) {\n        dcaTransactions[transaction.id] = {\n          result: {\n            amount: transaction.amount,\n            date: transaction.date,\n            price: transaction.price,\n            symbol: transaction.symbol,\n          },\n          sells: {},\n        };\n      } else {\n        let sellsListForSymbol = sellsMap.get(transaction.symbol);\n        if (!sellsListForSymbol) sellsListForSymbol = [];\n        sellsListForSymbol.push(transaction);\n        sellsMap.set(transaction.symbol, sellsListForSymbol);\n      }\n    });\n\n    // apply all possible sells to each buy\n    const buys = Object.values(dcaTransactions);\n    buys.forEach((dcaTransaction) => {\n      const buy = dcaTransaction.result;\n      // look up based on the symbol\n      const symbol = buy.symbol;\n      const sells = sellsMap.get(symbol);\n      // apply as many sells as possible to each buy\n      while (sells && sells.length !== 0 && buy.amount !== 0) {\n        const sell = sells.pop();\n        if (sell) {\n          let amountApplied = 0;\n          // apply all of the sell to buy\n          if (-1 * sell.amount <= buy.amount) {\n            amountApplied = sell.amount;\n            buy.amount += sell.amount;\n            sell.amount = 0;\n          }\n          // apply partial sell to buy\n          else {\n            amountApplied = -1 * buy.amount;\n            sell.amount += buy.amount;\n            buy.amount = 0;\n            // push the sell back on to use for other buys\n            sells.push(sell);\n          }\n          dcaTransaction.sells[sell.id] = {\n            amount: amountApplied,\n            date: sell.date,\n            price: sell.price,\n            symbol: sell.symbol,\n          };\n        }\n      }\n    });\n    return dcaTransactions;\n  }\n);\n\nexport const selectDCATransactionsAmountRemaining = createSelector(\n  [selectAppliedTransactions],\n  (dcaTransactions) => {\n    // flatten out the transactions to be easily accessible\n    const transactionsAmountLeft: { [id: string]: number } = {};\n    const entries = Object.entries(dcaTransactions);\n    entries.forEach((entry) => {\n      const buyUUID = entry[0];\n      transactionsAmountLeft[buyUUID] = entry[1].result.amount;\n      const sellEntries = Object.entries(entry[1].sells);\n      sellEntries.forEach((sellEntry) => {\n        const sellUUID = sellEntry[0];\n        transactionsAmountLeft[sellUUID] = sellEntry[1].amount;\n      });\n    });\n    return transactionsAmountLeft;\n  }\n);\n\nfunction addToSumMap(map: Map<string, number>, symbol: string, amount: number) {\n  let sum = map.get(symbol);\n  if (!sum) sum = 0;\n  sum += amount;\n  map.set(symbol, sum);\n}\n\nexport const selectAppliedTransactionsSummarized = createSelector(\n  [selectAppliedTransactions],\n  (dcaTransactions) => {\n    // sum up the amount left per symbol\n    const symbolToAmountsSumMap: Map<string, number> = new Map<\n      string,\n      number\n    >();\n    // sum up the (amount * price) left per symbol for a weighted sum\n    const symbolToWeightedSumMap: Map<string, number> = new Map<\n      string,\n      number\n    >();\n    Object.keys(dcaTransactions).forEach((buyId) => {\n      const buy = dcaTransactions[buyId];\n      if (buy.result.amount !== 0) {\n        const symbol = buy.result.symbol;\n        addToSumMap(symbolToAmountsSumMap, symbol, buy.result.amount);\n        addToSumMap(\n          symbolToWeightedSumMap,\n          symbol,\n          buy.result.amount * buy.result.price\n        );\n      }\n    });\n\n    const dcaSummary: IDollarCostAverageSummary = {};\n    symbolToAmountsSumMap.forEach((amountSum, symbol) => {\n      const weightedSum = symbolToWeightedSumMap.get(symbol);\n      if (weightedSum) {\n        const dcaPrice = weightedSum / amountSum;\n        dcaSummary[symbol] = {\n          symbol: symbol,\n          price: dcaPrice,\n        };\n      }\n    });\n    return dcaSummary;\n  }\n);\n\nexport const selectAppliedTransactionsProfitSummary = createSelector(\n  [selectAppliedTransactions, selectTransactions],\n  (dcaTransactions, transactionsData) => {\n    const symbolToSpendingsSumMap: Map<string, number> = new Map<\n      string,\n      number\n    >();\n    const symbolToEarningsSumMap: Map<string, number> = new Map<\n      string,\n      number\n    >();\n    const symbolToAmountNotSoldMap: Map<string, number> = new Map<\n      string,\n      number\n    >();\n    Object.keys(dcaTransactions).forEach((buyId) => {\n      const buy = dcaTransactions[buyId];\n      const symbol = buy.result.symbol;\n      const sellIds = Object.keys(buy.sells);\n\n      const amountNotSold = buy.result.amount;\n      const amountSold = transactionsData[buyId].amount - amountNotSold;\n\n      // sum up how much was bought but not sold\n      if (amountNotSold !== 0) {\n        addToSumMap(symbolToAmountNotSoldMap, symbol, amountNotSold);\n      }\n      // sum up how much was bought and sold\n      addToSumMap(\n        symbolToSpendingsSumMap,\n        symbol,\n        amountSold * transactionsData[buyId].price\n      );\n      sellIds.forEach((sellId) => {\n        const sell = buy.sells[sellId];\n        // sum up returns\n        const returns = -1 * sell.amount * sell.price;\n        // add to earnings\n        addToSumMap(symbolToEarningsSumMap, symbol, returns);\n      });\n    });\n\n    // combine\n    const symbolToProfitsSumMap: Map<string, number> = new Map<\n      string,\n      number\n    >();\n    symbolToSpendingsSumMap.forEach((val, key) =>\n      addToSumMap(symbolToProfitsSumMap, key, -1 * val)\n    );\n    symbolToEarningsSumMap.forEach((val, key) =>\n      addToSumMap(symbolToProfitsSumMap, key, val)\n    );\n\n    // return\n    const profitSummary: IDollarCostAverageProfitSummary = {\n      profits: {},\n      notSoldAmount: {},\n    };\n    symbolToProfitsSumMap.forEach(\n      (val, key) => (profitSummary.profits[key] = val)\n    );\n    symbolToAmountNotSoldMap.forEach(\n      (val, key) => (profitSummary.notSoldAmount[key] = val)\n    );\n    return profitSummary;\n  }\n);\n\nexport default transactionsSlice.reducer;\n","export interface ITransaction {\n  date: number;\n  symbol: string;\n  amount: number;\n  price: number;\n}\n\nexport function isBuy(transaction: ITransaction) {\n  if (transaction.amount > 0) return true;\n  else return false;\n}\n\n/** Extends the ITransaction interface to add an id field */\nexport interface ITransactionAndId extends ITransaction {\n  id: string;\n}\n","export interface IDashboardTD{\n    value: number;\n    formatter: (value: number) => string;\n}\nexport function DashboardTD (props: IDashboardTD){\n    const computeTextStyle = (val: number) => {\n        if (val < 0) return \"red\";\n        else if (val > 0) return \"green\";\n        else return \"black\";\n    }\n    return <td style={{textAlign: \"right\", color: computeTextStyle(props.value)}}>{props.value === 0.0 ? \"-\" : props.formatter(props.value) }</td>\n\n}\n","import { useAppSelector } from \"../app/hooks\";\nimport { selectCurrentPrices } from \"../slices/currentPricesSlice\";\nimport { selectAppliedTransactionsProfitSummary, selectAppliedTransactionsSummarized } from \"../slices/transactionsSlice\";\nimport { formatDollarAmount } from \"../utilities/number-utils\";\nimport { DashboardTD } from \"./DashboardTD\";\n\nexport function DollarCostAverages() {\n    const dcaSummaries = useAppSelector(selectAppliedTransactionsSummarized);\n    const dcaProfitSummary = useAppSelector(selectAppliedTransactionsProfitSummary);\n    const currentPrices = useAppSelector(selectCurrentPrices);\n\n    let currentValueSum = 0;\n    let unrealizedProfitsSum = 0;\n    let allTimeProfitsSum = 0;\n    const dashboard = Object.entries(dcaProfitSummary.profits).map((entry) => {\n        const symbol = entry[0];\n        const profits = entry[1];\n        const amount: number = dcaProfitSummary.notSoldAmount[symbol] ? dcaProfitSummary.notSoldAmount[symbol] : 0;\n        const currentPrice: number | undefined = currentPrices[symbol];\n        const currentValue = (currentPrice && amount) ? currentPrice * amount : 0;\n        const dca = dcaSummaries[symbol] ? dcaSummaries[symbol].price : 0;\n        const totalCost = dca * amount;\n        const potentialEarnings = currentPrice * amount;\n        const unrealizedProfits = potentialEarnings - totalCost;\n\n        // update running totals\n        currentValueSum += currentValue;\n        unrealizedProfitsSum += unrealizedProfits;\n        allTimeProfitsSum += profits;\n\n        return <tr key={\"dashboard-\" + symbol}>\n            <td>{symbol}</td>\n            <DashboardTD value={currentValue} formatter={formatDollarAmount}></DashboardTD>\n            <DashboardTD value={amount} formatter={(val) => val.toFixed(2)}></DashboardTD>\n            <DashboardTD value={currentPrice} formatter={formatDollarAmount}></DashboardTD>\n            <DashboardTD value={dca} formatter={formatDollarAmount}></DashboardTD>\n            <DashboardTD value={(currentPrice && dca) ? ((currentPrice - dca) / dca * 100) : 0.0} formatter={(val) => val.toFixed(2) + \"%\"}></DashboardTD>\n            <DashboardTD value={unrealizedProfits} formatter={formatDollarAmount}></DashboardTD>\n            <DashboardTD value={profits} formatter={formatDollarAmount}></DashboardTD>\n        </tr>\n    });\n\n    return <div style={{textAlign:\"center\", padding:\"40px\"}}>\n        <h1>Dashboard</h1>\n        <table style={{marginLeft : \"auto\", marginRight: \"auto\", width:\"100%\"}}>\n            <thead>\n                <tr>\n                    <th>Symbol</th><th>Current Value</th><th>Amount</th><th>Current Price</th><th>Dollar Cost Average</th><th>% Return</th><th>Unrealized Profits</th><th>All Time Profits</th>\n                </tr>\n            </thead>\n            <tbody>\n                {dashboard}\n            </tbody>\n            <tfoot>\n                <tr>\n                    <td>Total</td>\n                    <DashboardTD value={currentValueSum} formatter={formatDollarAmount}></DashboardTD>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <DashboardTD value={unrealizedProfitsSum} formatter={formatDollarAmount}></DashboardTD>\n                    <DashboardTD value={allTimeProfitsSum} formatter={formatDollarAmount}></DashboardTD>\n                </tr>\n            </tfoot>\n\n        </table>\n    </div>\n}","import { initializeApp } from 'firebase/app';\nimport { getDatabase } from 'firebase/database';\nimport * as firebaseWebConfig from '../config/firebase.config.json';\n\nconst firebaseConfig = {\n  apiKey: firebaseWebConfig.apiKey,\n  authDomain: firebaseWebConfig.authDomain,\n  databaseURL: firebaseWebConfig.databaseURL,\n  storageBucket: firebaseWebConfig.storageBucket,\n};\n\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the database service\nexport const database = getDatabase(app);\n\nexport interface CryptoDictionary {\n  [symbol: string]: number;\n}\n","import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { DataTable } from './components/DataTable';\nimport { DollarCostAverages } from './components/DollarCostAverages';\nimport { ITransaction } from './model/ITransaction';\nimport { addTransaction, bulkAddTransactions, deleteAllTransactions, removeTransaction, selectDCATransactionsAmountRemaining, selectTransactions, updateTransaction } from './slices/transactionsSlice';\nimport { updateCurrentPrices } from './slices/currentPricesSlice';\n\nimport { onValue, ref } from 'firebase/database';\nimport { CryptoDictionary, database } from './firebase/firebase';\n\n\nfunction App() {\n  const dispatch = useAppDispatch();\n\n  const transactions = useAppSelector(selectTransactions);\n  const dcaTransactionsRemaining = useAppSelector(selectDCATransactionsAmountRemaining);\n\n  function handleCreateTransaction(transaction?: ITransaction) {\n    dispatch(addTransaction(transaction ? transaction : null));\n  }\n\n  function handleUpdateTransaction(id: string, transaction: Partial<ITransaction>) {\n    dispatch(updateTransaction({ id: id, transaction: transaction }));\n  }\n\n  function handleDeleteTransaction(id: string) {\n    dispatch(removeTransaction({ id: id }));\n  }\n\n  function handleImportTransactionsComplete(transactions: ITransaction[]) {\n    dispatch(deleteAllTransactions());\n    dispatch(bulkAddTransactions(transactions));\n  }\n\n  // on open, fetch current prices\n  useEffect(() => {\n\n    const dbRef = ref(database);\n\n    // subscribe\n    const unsubscribe = onValue(dbRef, (snapshot) => {\n      if (snapshot.exists()) {\n        const cryptoPrices = snapshot.val().cryptos as CryptoDictionary;\n        console.log(cryptoPrices);\n\n        dispatch(updateCurrentPrices(cryptoPrices));\n      } else {\n        console.log('No data available');\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    }\n  }, [dispatch])\n\n  return (\n    <div>\n      <DollarCostAverages></DollarCostAverages>\n      <DataTable title=\"Cryptos\" data={transactions} dcaData={dcaTransactionsRemaining} addRow={handleCreateTransaction} updateRow={handleUpdateTransaction} deleteRow={handleDeleteTransaction} onImportComplete={handleImportTransactionsComplete} ></DataTable>\n      <div style={{ height: 100 }}></div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport currentPricesSlice from '../slices/currentPricesSlice';\nimport transactionsSlice from '../slices/transactionsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    transactionsData: transactionsSlice,\n    currentPrices: currentPricesSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !==null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}