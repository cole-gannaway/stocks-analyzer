{"version":3,"sources":["app/hooks.ts","utilities/csv-utils.ts","components/DatePickerWrapper.tsx","utilities/date-utils.ts","components/DataRow.tsx","utilities/number-utils.ts","components/DataTable.tsx","firebase/firebase.ts","slices/currentPricesSlice.ts","slices/transactionsSlice.ts","model/ITransaction.ts","components/DollarCostAverages.tsx","utilities/transaction-utils.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","convertCSVRowIntoTransactionRow","csvRow","symbol","date","parseInt","amount","parseFloat","price","isNaN","DatePickerWrapper","props","utils","DateFnsUtils","margin","format","value","ms","Date","month","actualMonth","toString","getMonthInMMFormat","getMonth","getDateinDDFormat","getDate","getFullYear","convertDateMsToString","onChange","getTime","KeyboardButtonProps","DataRow","val","decimalPlaces","useState","isEditing","setIsEditing","dateTime","data","commaFormatter","Intl","NumberFormat","buySell","textColor","textDecoration","isUsed","toggleIsEditing","TableRow","TableCell","onClick","e","className","style","TextField","updateRow","uuid","target","variant","toLocaleDateString","toLocaleTimeString","type","inputProps","color","toFixed","Math","round","Number","EPSILON","pow","deleteRow","DataTable","TableContainer","component","Paper","textAlign","title","addRow","maxHeight","overflowX","Table","stickyHeader","TableHead","TableBody","Object","entries","map","entry","row","dcaData","accept","files","file","reader","FileReader","onload","evt","bstr","result","rows","parse","dataRows","i","length","dataRow","push","onImportComplete","readAsBinaryString","Button","filename","csvContent","csvRows","unshift","convertTransactionRowIntoCSVRows","values","join","link","document","createElement","setAttribute","click","remove","firebaseConfig","apiKey","firebaseWebConfig","authDomain","databaseURL","storageBucket","app","initializeApp","database","getDatabase","getCryptosPrices","a","retVal","console","log","dbRef","ref","get","child","snapshot","exists","error","fetchCurrentCryptoPrices","createAsyncThunk","currentPrices","currentPricesSlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","forEach","key","selectCurrentPrices","transactionsSlice","transactions","summaryData","dollarCostAveragesTransactions","dollarCostAveragesSummary","dollarCostAveragesProfitsSummary","profits","notSoldAmount","addTransaction","id","defaultITransaction","now","bulkAddTransactions","transaction","updateTransaction","orig","update","undefined","removeTransaction","updateDollarCostAverageTransactions","updateDollarCostAverageSummary","updateDollarCostAverageProfitSummary","actions","selectTransactions","transactionsData","selectDCASummaries","selectDCAProfitSummary","selectDCATransactionsMemoized","createSelector","sort","b","dcaTransactions","sellsMap","Map","isBuy","sells","sellsListForSymbol","set","dcaTransaction","buy","sell","pop","amountApplied","selectDCATransactionsAmountRemaining","transactionsAmountLeft","buyUUID","sellEntry","sellUUID","DollarCostAverages","dcaSummaries","dcaProfitSummary","symbolsAndPrices","keys","filter","Grid","container","spacing","item","xs","sm","summary","totalCost","unrealizedProfits","reduce","prev","curr","addToSumMap","sum","summarizeProfitsFromDollarCostAverageTransactions","symbolToSpendingsSumMap","symbolToEarningsSumMap","symbolToAmountNotSoldMap","buyId","sellIds","amountNotSold","amountSold","sellId","returns","symbolToProfitsSumMap","profitSummary","App","dispatch","useDispatch","dcaTransactionsRemaining","useEffect","dcaSummary","symbolToAmountsSumMap","symbolToWeightedSumMap","amountSum","weightedSum","dcaPrice","summarizeDollarCostAverageTransactions","height","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0055ef83.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { ITransaction } from '../model/ITransaction';\n\nexport function createCSV(rows: string[][]) {\n  let csvContent =\n    'data:text/csv;charset=utf-8,' + rows.map((e) => e.join(',')).join('\\n');\n  return csvContent;\n}\n\nexport function convertTransactionRowIntoCSVRows(dataRows: ITransaction[]) {\n  const csvRows = dataRows.map((dataRow) => {\n    const row: string[] = [];\n    row.push(dataRow.symbol);\n    row.push(dataRow.date.toString());\n    row.push(dataRow.amount.toString());\n    row.push(dataRow.price.toString());\n    return row;\n  });\n  const headerRow = ['symbol', 'date', 'amount', 'price'];\n  csvRows.unshift(headerRow);\n  return csvRows;\n}\n\nexport function convertCSVRowIntoTransactionRow(csvRow: string[]) {\n  const symbol = csvRow[0];\n  const date: number = parseInt(csvRow[1]);\n  const amount: number = parseFloat(csvRow[2]);\n  const price:number = parseFloat(csvRow[3]);\n  const result: ITransaction = {\n    symbol: symbol,\n    date: !isNaN(date) ? date : -1,\n    amount: !isNaN(amount) ? amount : -1,\n    price: !isNaN(price) ? price : -1,\n  };\n  return result;\n}\n","import { getDateinDDFormat, getMonthInMMFormat } from '../utilities/date-utils'\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\n\nexport interface DatePickerWrapperProps {\n    value: number;\n    onChange: (date: number) => void;\n}\n\nexport function DatePickerWrapper(props: DatePickerWrapperProps) {\n    function convertDateMsToString(ms: number) {\n        const date = new Date(ms);\n        const MM = getMonthInMMFormat(date.getMonth());\n        const dd = getDateinDDFormat(date.getDate())\n        const retVal = MM + \"/\" + dd + \"/\" + date.getFullYear().toString();\n        return retVal;\n    }\n\n    function handleChange(date: MaterialUiPickersDate) {\n        if (date) {\n            props.onChange(date.getTime());\n        }\n    }\n\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n            margin=\"normal\"\n            format=\"MM/dd/yyyy\"\n            value={convertDateMsToString(props.value)}\n            onChange={handleChange}\n            KeyboardButtonProps={{\n                'aria-label': 'change date',\n            }}\n        />\n    </MuiPickersUtilsProvider>\n}","export const MILLIS_PER_WEEK = 1000 * 60 * 60 * 24 * 7;\n\nexport function getMonthInMMFormat(month: number) {\n  const actualMonth = month + 1;\n  if (actualMonth < 10) {\n    return '0' + actualMonth.toString();\n  } else {\n    return actualMonth.toString();\n  }\n}\nexport function getDateinDDFormat(date: number) {\n  if (date < 10) {\n    return '0' + date.toString();\n  } else {\n    return date.toString();\n  }\n}\nexport function compareDates(a: Date, b: Date) {\n  let compare = a.getFullYear() - b.getFullYear();\n  if (compare === 0) {\n    compare = a.getMonth() - b.getMonth();\n  }\n  if (compare === 0) {\n    compare = a.getDate() - b.getDate();\n  }\n  return compare;\n}\n","\nimport { DatePickerWrapper } from './DatePickerWrapper';\nimport { ITransaction } from '../model/ITransaction';\n\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport { TextField } from '@material-ui/core';\nimport { roundDecimalPlaces } from '../utilities/number-utils';\nimport { useState } from 'react';\n\nexport interface ITransactionProps {\n    uuid: string;\n    data: ITransaction;\n    isUsed: boolean;\n    addRow: (data?: ITransaction) => void;\n    updateRow: (id: string, row: Partial<ITransaction>) => void;\n    deleteRow: (id: string) => void;\n}\nexport function DataRow(props: ITransactionProps) {\n    const [isEditing, setIsEditing] = useState(false);\n    const dateTime = new Date(props.data.date);\n    const commaFormatter = new Intl.NumberFormat('en-US');\n\n    const buySell = props.data.amount === 0 ? \"neither\" : props.data.amount > 0 ? \"buy\" : \"sell\";\n    const textColor = buySell === \"buy\" ? \"red\" : buySell === \"sell\" ? \"green\" : \"black\";\n    const textDecoration = props.isUsed ? \"line-through\" : \"none\";\n\n    function toggleIsEditing() {\n        setIsEditing(!isEditing);\n    }\n    return <TableRow>\n        <TableCell >\n            {!isEditing ? <EditIcon onClick={(e) => { toggleIsEditing() }} /> : <SaveIcon onClick={(e) => { toggleIsEditing() }} />}\n        </TableCell>\n        <TableCell className=\"label-form\" style={{ textDecoration: textDecoration }}>\n            {!isEditing ?\n                props.data.symbol :\n                <TextField value={props.data.symbol} onChange={(e) => props.updateRow(props.uuid, { symbol: e.target.value })} variant=\"outlined\"></TextField>\n            }\n        </TableCell>\n        <TableCell className=\"label-date\">\n            {!isEditing ?\n                dateTime.toLocaleDateString() + \" \" + dateTime.toLocaleTimeString() :\n                <DatePickerWrapper value={props.data.date} onChange={(date: number) => props.updateRow(props.uuid, { date: date })}></DatePickerWrapper>\n            }\n        </TableCell>\n        <TableCell>\n            {!isEditing ?\n                props.data.amount :\n                <TextField type=\"number\" value={props.data.amount}\n                    onChange={(e) => {\n                        const amount = parseFloat(e.target.value);\n                        if (amount) props.updateRow(props.uuid, { amount: amount });\n                    }}\n                    inputProps={{ style: { color: textColor } }}\n                    variant=\"outlined\"\n                ></TextField>\n            }\n        </TableCell>\n        <TableCell>\n            {!isEditing ?\n                (\"$\" + commaFormatter.format(props.data.price)) :\n                <TextField type=\"number\" value={props.data.price}\n                    onChange={(e) => {\n                        const price = parseFloat(e.target.value);\n                        if (price) props.updateRow(props.uuid, { price: price });\n                    }}\n                    inputProps={{ style: { color: textColor } }}\n                    variant=\"outlined\"\n                ></TextField>\n            }\n        </TableCell>\n        <TableCell>\n            {!isEditing ?\n                (\"$\" + commaFormatter.format(roundDecimalPlaces(props.data.price * props.data.amount, 2))) :\n                <TextField type=\"number\" value={(props.data.price * props.data.amount).toFixed(2)}\n                    inputProps={{ style: { color: textColor } }}\n                    variant=\"outlined\"\n                ></TextField>\n            }\n        </TableCell>\n        <TableCell onClick={() => props.deleteRow(props.uuid)}><DeleteIcon /></TableCell>\n    </TableRow >\n}","export function formatWithCommas(formatter: Intl.NumberFormat, val: number) {\n  formatter.format(val);\n}\n\nexport function roundDecimalPlaces(val: number, decimalPlaces: number) {\n  return (\n    Math.round((val + Number.EPSILON) * Math.pow(10, decimalPlaces)) /\n    Math.pow(10, decimalPlaces)\n  );\n}\n","import React from 'react';\nimport './DataTable.css'\n\nimport { ITransaction } from '../model/ITransaction';\nimport { convertCSVRowIntoTransactionRow, convertTransactionRowIntoCSVRows, createCSV } from '../utilities/csv-utils'\nimport { DataRow } from './DataRow';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n\nimport { parse } from 'papaparse';\nimport { TableFooter } from '@material-ui/core';\n\n\nexport interface ITableProps {\n    title: string;\n    data: { [id: string]: ITransaction; }\n    dcaData: { [id: string]: number };\n    addRow: (data?: ITransaction) => void;\n    updateRow: (id: string, row: Partial<ITransaction>) => void;\n    deleteRow: (id: string) => void;\n    onImportComplete: (data: ITransaction[]) => void;\n}\nexport function DataTable(props: ITableProps) {\n\n    function handleAddRow() {\n        props.addRow();\n    }\n    function handleImport(e: React.ChangeEvent<HTMLInputElement>) {\n        if (e.target.files) {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n            reader.onload = (evt) => {\n                /* Parse data */\n                const bstr = evt.target?.result;\n                if (bstr) {\n                    const rows = parse(bstr.toString());\n                    const dataRows: ITransaction[] = []\n                    for (let i = 1; i < rows.data.length; i++) {\n                        const row = rows.data[i] as string[];\n                        const dataRow = convertCSVRowIntoTransactionRow(row);\n                        dataRows.push(dataRow);\n                    }\n                    props.onImportComplete(dataRows);\n                }\n            };\n            reader.readAsBinaryString(file);\n        }\n    }\n    function handleExport() {\n        const filename = props.title;\n        const csvRows = convertTransactionRowIntoCSVRows(Object.values(props.data));\n        const csvContent = createCSV(csvRows);\n        const link = document.createElement('a');\n        link.setAttribute('href', csvContent);\n        link.setAttribute('download', filename + \".csv\");\n        link.click();\n        link.remove();\n    }\n\n    return <div>\n        <TableContainer component={Paper} >\n            <div style={{ textAlign: 'center' }}>\n                <h3>{props.title} <AddCircleOutlineIcon onClick={handleAddRow} /></h3>\n            </div>\n            <div style={{ maxHeight: 400, overflowX: 'auto' }}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Symbol </TableCell>\n                            <TableCell>Date</TableCell>\n                            <TableCell>Amount</TableCell>\n                            <TableCell>Price</TableCell>\n                            <TableCell>Total</TableCell>\n                            <TableCell></TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody >\n                        {Object.entries(props.data).map((entry) => {\n                            const uuid = entry[0];\n                            const row = entry[1];\n                            const amountRemaining = props.dcaData[uuid];\n                            const isUsed = amountRemaining === 0 ? true : false;\n                            return <DataRow key={uuid} uuid={uuid} data={row} isUsed={isUsed} addRow={props.addRow} updateRow={props.updateRow} deleteRow={props.deleteRow} />\n                        })}\n                    </TableBody>\n                </Table>\n            </div>\n        </TableContainer>\n        <div>\n            <input type=\"file\" accept=\".csv\" onChange={handleImport} />\n            <Button onClick={handleExport}>Export</Button>\n        </div>\n    </div>\n}\n\n","import { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, child, get } from 'firebase/database';\nimport * as firebaseWebConfig from '../config/firebase.config.json';\n\nconst firebaseConfig = {\n  apiKey: firebaseWebConfig.apiKey,\n  authDomain: firebaseWebConfig.authDomain,\n  databaseURL: firebaseWebConfig.databaseURL,\n  storageBucket: firebaseWebConfig.storageBucket,\n};\n\nconst app = initializeApp(firebaseConfig);\n\n// Get a reference to the database service\nconst database = getDatabase(app);\n\nexport interface CryptoDictionary {\n  [symbol: string]: number;\n}\n\nexport async function getCryptosPrices(): Promise<CryptoDictionary> {\n  let retVal = {};\n  console.log('I am running');\n  try {\n    const dbRef = ref(database);\n    const snapshot = await get(child(dbRef, 'cryptos'));\n    if (snapshot.exists()) {\n      retVal = snapshot.val() as CryptoDictionary;\n      console.log(snapshot.val());\n    } else {\n      console.log('No data available');\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return retVal;\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { CryptoDictionary, getCryptosPrices } from '../firebase/firebase';\n\nconst initialState: CryptoDictionary = {};\n\nexport const fetchCurrentCryptoPrices = createAsyncThunk(\n  'currentPrices/getCryptosPrices',\n  async () => {\n    const currentPrices = await getCryptosPrices();\n    return currentPrices;\n  }\n);\n\nexport const currentPricesSlice = createSlice({\n  name: 'currentPrices',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchCurrentCryptoPrices.fulfilled, (state, action) => {\n      console.log(action.payload);\n      Object.entries(action.payload).forEach((entry) => {\n        const key = entry[0];\n        const value = entry[1];\n        state[key] = value;\n      });\n    });\n  },\n});\n\nexport const selectCurrentPrices = (state: RootState) => state.currentPrices;\n\nexport default currentPricesSlice.reducer;\n","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../app/store';\nimport { uuid } from 'uuidv4';\nimport { isBuy, ITransaction, ITransactionAndId } from '../model/ITransaction';\nimport {\n  IDollarCostAverageProfitSummary,\n  IDollarCostAverageSummary,\n  IDollarCostAverageTransactions,\n} from '../model/IDollarCostAverage';\n\nexport interface TranscationsState {\n  transactions: {\n    [id: string]: ITransaction;\n  };\n  summaryData: {\n    dollarCostAveragesTransactions: IDollarCostAverageTransactions;\n    dollarCostAveragesSummary: IDollarCostAverageSummary;\n    dollarCostAveragesProfitsSummary: IDollarCostAverageProfitSummary;\n  };\n}\n\nconst initialState: TranscationsState = {\n  transactions: {},\n  summaryData: {\n    dollarCostAveragesTransactions: {},\n    dollarCostAveragesSummary: {},\n    dollarCostAveragesProfitsSummary: {\n      profits: {},\n      notSoldAmount: {},\n    },\n  },\n};\n\nexport const transactionsSlice = createSlice({\n  name: 'transactionsData',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    addTransaction: (state, action: PayloadAction<ITransaction | null>) => {\n      const id = uuid();\n      if (action.payload) {\n        state.transactions[id] = action.payload;\n      } else {\n        const defaultITransaction: ITransaction = {\n          symbol: '',\n          date: Date.now(),\n          amount: 0,\n          price: 0,\n        };\n        state.transactions[id] = defaultITransaction;\n      }\n    },\n    bulkAddTransactions: (state, action: PayloadAction<ITransaction[]>) => {\n      action.payload.forEach((transaction) => {\n        const id = uuid();\n        state.transactions[id] = transaction;\n      });\n    },\n    updateTransaction: (\n      state,\n      action: PayloadAction<{ id: string; transaction: Partial<ITransaction> }>\n    ) => {\n      const orig = state.transactions[action.payload.id];\n      const update = action.payload.transaction;\n      // hard-code the updated fields\n      if (update.amount !== undefined) orig.amount = update.amount;\n      if (update.date !== undefined) orig.date = update.date;\n      if (update.price !== undefined) orig.price = update.price;\n      if (update.symbol !== undefined) orig.symbol = update.symbol;\n    },\n    removeTransaction: (state, action: PayloadAction<{ id: string }>) => {\n      delete state.transactions[action.payload.id];\n    },\n    updateDollarCostAverageTransactions: (\n      state,\n      action: PayloadAction<IDollarCostAverageTransactions>\n    ) => {\n      state.summaryData.dollarCostAveragesTransactions = action.payload;\n    },\n    updateDollarCostAverageSummary: (\n      state,\n      action: PayloadAction<IDollarCostAverageSummary>\n    ) => {\n      state.summaryData.dollarCostAveragesSummary = action.payload;\n    },\n    updateDollarCostAverageProfitSummary: (\n      state,\n      action: PayloadAction<IDollarCostAverageProfitSummary>\n    ) => {\n      state.summaryData.dollarCostAveragesProfitsSummary = action.payload;\n    },\n  },\n});\n\nexport const {\n  addTransaction,\n  bulkAddTransactions,\n  updateTransaction,\n  removeTransaction,\n  updateDollarCostAverageTransactions,\n  updateDollarCostAverageSummary,\n  updateDollarCostAverageProfitSummary,\n} = transactionsSlice.actions;\n\nexport const selectTransactions = (state: RootState) =>\n  state.transactionsData.transactions;\nexport const selectDCASummaries = (state: RootState) =>\n  state.transactionsData.summaryData.dollarCostAveragesSummary;\nexport const selectDCATransactions = (state: RootState) =>\n  state.transactionsData.summaryData.dollarCostAveragesTransactions;\nexport const selectDCAProfitSummary = (state: RootState) =>\n  state.transactionsData.summaryData.dollarCostAveragesProfitsSummary;\n\nexport const selectDCATransactionsMemoized = createSelector(\n  [selectTransactions],\n  (transactionsData) => {\n    // deep copy transactions map to a list\n    const transactions: ITransactionAndId[] = Object.entries(\n      transactionsData\n    ).map((entry) => {\n      return {\n        id: entry[0],\n        amount: entry[1].amount,\n        date: entry[1].date,\n        price: entry[1].price,\n        symbol: entry[1].symbol,\n      };\n    });\n\n    // sort transactions by date\n    transactions.sort((a, b) => a.date - b.date);\n\n    /** Map containing buys */\n    const dcaTransactions: IDollarCostAverageTransactions = {};\n    /** Map containing symbols to \"sell transactions\" sorted by date */\n    const sellsMap: Map<string, ITransactionAndId[]> = new Map();\n    transactions.forEach((transaction) => {\n      if (isBuy(transaction)) {\n        dcaTransactions[transaction.id] = {\n          result: {\n            amount: transaction.amount,\n            date: transaction.date,\n            price: transaction.price,\n            symbol: transaction.symbol,\n          },\n          sells: {},\n        };\n      } else {\n        let sellsListForSymbol = sellsMap.get(transaction.symbol);\n        if (!sellsListForSymbol) sellsListForSymbol = [];\n        sellsListForSymbol.push(transaction);\n        sellsMap.set(transaction.symbol, sellsListForSymbol);\n      }\n    });\n\n    // apply all possible sells to each buy\n    const buys = Object.values(dcaTransactions);\n    buys.forEach((dcaTransaction) => {\n      const buy = dcaTransaction.result;\n      // look up based on the symbol\n      const symbol = buy.symbol;\n      const sells = sellsMap.get(symbol);\n      // apply as many sells as possible to each buy\n      while (sells && sells.length !== 0 && buy.amount !== 0) {\n        const sell = sells.pop();\n        if (sell) {\n          let amountApplied = 0;\n          // apply all of the sell to buy\n          if (-1 * sell.amount <= buy.amount) {\n            amountApplied = sell.amount;\n            buy.amount += sell.amount;\n            sell.amount = 0;\n          }\n          // apply partial sell to buy\n          else {\n            amountApplied = -1 * buy.amount;\n            sell.amount += buy.amount;\n            buy.amount = 0;\n            // push the sell back on to use for other buys\n            sells.push(sell);\n          }\n          dcaTransaction.sells[sell.id] = {\n            amount: amountApplied,\n            date: sell.date,\n            price: sell.price,\n            symbol: sell.symbol,\n          };\n        }\n      }\n    });\n    return dcaTransactions;\n  }\n);\n\nexport const selectDCATransactionsAmountRemaining = createSelector(\n  [selectDCATransactionsMemoized],\n  (dcaTransactions) => {\n    // flatten out the transactions to be easily accessible\n    const transactionsAmountLeft: { [id: string]: number } = {};\n    const entries = Object.entries(dcaTransactions);\n    entries.forEach((entry) => {\n      const buyUUID = entry[0];\n      transactionsAmountLeft[buyUUID] = entry[1].result.amount;\n      const sellEntries = Object.entries(entry[1].sells);\n      sellEntries.forEach((sellEntry) => {\n        const sellUUID = sellEntry[0];\n        transactionsAmountLeft[sellUUID] = sellEntry[1].amount;\n      });\n    });\n    return transactionsAmountLeft;\n  }\n);\n\nexport default transactionsSlice.reducer;\n","export interface ITransaction {\n  date: number;\n  symbol: string;\n  amount: number;\n  price: number;\n}\n\nexport function isBuy(transaction: ITransaction) {\n  if (transaction.amount > 0) return true;\n  else return false;\n}\n\n/** Extends the ITransaction interface to add an id field */\nexport interface ITransactionAndId extends ITransaction {\n  id: string;\n}\n","import { Grid } from \"@material-ui/core\";\nimport { useAppSelector } from \"../app/hooks\";\nimport { selectCurrentPrices } from \"../slices/currentPricesSlice\";\nimport { selectDCAProfitSummary, selectDCASummaries } from \"../slices/transactionsSlice\";\n\nexport function DollarCostAverages() {\n    const dcaSummaries = useAppSelector(selectDCASummaries);\n    const dcaProfitSummary = useAppSelector(selectDCAProfitSummary);\n    const currentPrices = useAppSelector(selectCurrentPrices);\n\n    const symbols = Object.keys(dcaSummaries);\n    const symbolsAndPrices = symbols.filter(symbol => currentPrices[symbol]).map(symbol => {\n        return { symbol: symbol, price: currentPrices[symbol] };\n    });\n\n    return <div>\n        <h3>Wallet</h3>\n        <table key=\"wallet\">\n            <tbody>\n                {Object.entries(dcaProfitSummary.notSoldAmount).map((entry) => {\n                    const symbol = entry[0];\n                    const amount = entry[1];\n                    return <tr key={\"wallet-\" + symbol}><td>{symbol}</td><td>{amount.toFixed(2)}</td></tr>\n                })}\n            </tbody>\n        </table>\n        <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n                <h3>Dollar Cost Averages</h3>\n                <table key={\"dca-summary\"}>\n                    <tbody>\n                        {Object.entries(dcaSummaries).map((entry) => {\n                            const symbol = entry[0];\n                            const summary = entry[1];\n                            return <tr key={\"dca-summary-\" + symbol}><td>{symbol}</td><td>${summary.price.toFixed(2)}</td></tr>\n                        })}\n                    </tbody>\n                </table>\n\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <h3>Current Prices</h3>\n                <table key={\"current-prices\"}>\n                    <tbody>\n                        {symbolsAndPrices.map(data => {\n                            return <tr key={\"current-prices-\" + data.symbol}><td>{data.symbol}</td><td>${data.price.toFixed(2)}</td></tr>\n                        })}\n                    </tbody>\n                </table>\n\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <h3>Unrealized Profits</h3>\n                <table key=\"dca-unrealized-profits\">\n                    <tbody>\n                        {Object.entries(dcaProfitSummary.notSoldAmount).map((entry) => {\n                            const symbol = entry[0];\n                            const amount = entry[1];\n                            const dcaPrice = dcaSummaries[symbol].price;\n                            const totalCost = dcaPrice * amount;\n                            const potentialEarnings = currentPrices[symbol] * amount;\n                            const unrealizedProfits = potentialEarnings - totalCost;\n                            return <tr key={\"dca-unrealized-profits-\" + symbol}><td>{symbol}</td><td>${unrealizedProfits.toFixed(2)}</td></tr>\n                        })}\n                    </tbody>\n                </table>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <h3>Profits</h3>\n                <table key=\"dca-profits\">\n                    <tbody>\n                        {Object.entries(dcaProfitSummary.profits).map((entry) => {\n                            const symbol = entry[0];\n                            const profits = entry[1];\n                            return <tr key={\"dca-profits-\" + symbol}><td>{symbol}</td><td>${profits.toFixed(2)}</td></tr>\n                        })}\n                        <tr key={\"dca-profits-sum\"}><td>Total</td><td>${Object.values(dcaProfitSummary.profits).reduce((prev, curr) => prev + curr, 0).toFixed(2)}</td></tr>\n                    </tbody>\n                </table>\n            </Grid>\n        </Grid>\n\n    </div>\n}","import {\n  IDollarCostAverageProfitSummary,\n  IDollarCostAverageSummary,\n  IDollarCostAverageTransactions,\n} from '../model/IDollarCostAverage';\nimport { ITransaction } from '../model/ITransaction';\n\nfunction addToSumMap(map: Map<string, number>, symbol: string, amount: number) {\n  let sum = map.get(symbol);\n  if (!sum) sum = 0;\n  sum += amount;\n  map.set(symbol, sum);\n}\n\nexport function summarizeDollarCostAverageTransactions(\n  dcaTransactions: IDollarCostAverageTransactions\n) {\n  // sum up the amount left per symbol\n  const symbolToAmountsSumMap: Map<string, number> = new Map<string, number>();\n  // sum up the (amount * price) left per symbol for a weighted sum\n  const symbolToWeightedSumMap: Map<string, number> = new Map<string, number>();\n  Object.keys(dcaTransactions).forEach((buyId) => {\n    const buy = dcaTransactions[buyId];\n    if (buy.result.amount !== 0) {\n      const symbol = buy.result.symbol;\n      addToSumMap(symbolToAmountsSumMap, symbol, buy.result.amount);\n      addToSumMap(\n        symbolToWeightedSumMap,\n        symbol,\n        buy.result.amount * buy.result.price\n      );\n    }\n  });\n\n  const dcaSummary: IDollarCostAverageSummary = {};\n  symbolToAmountsSumMap.forEach((amountSum, symbol) => {\n    const weightedSum = symbolToWeightedSumMap.get(symbol);\n    if (weightedSum) {\n      const dcaPrice = weightedSum / amountSum;\n      dcaSummary[symbol] = {\n        symbol: symbol,\n        price: dcaPrice,\n      };\n    }\n  });\n  return dcaSummary;\n}\n\nexport function summarizeProfitsFromDollarCostAverageTransactions(\n  dcaTransactions: IDollarCostAverageTransactions,\n  transactionsData: { [id: string]: ITransaction }\n) {\n  const symbolToSpendingsSumMap: Map<string, number> = new Map<\n    string,\n    number\n  >();\n  const symbolToEarningsSumMap: Map<string, number> = new Map<string, number>();\n  const symbolToAmountNotSoldMap: Map<string, number> = new Map<\n    string,\n    number\n  >();\n  Object.keys(dcaTransactions).forEach((buyId) => {\n    const buy = dcaTransactions[buyId];\n    const symbol = buy.result.symbol;\n    const sellIds = Object.keys(buy.sells);\n\n    const amountNotSold = buy.result.amount;\n    const amountSold = transactionsData[buyId].amount - amountNotSold;\n\n    // sum up how much was bought but not sold\n    if (amountNotSold !== 0) {\n      addToSumMap(symbolToAmountNotSoldMap, symbol, amountNotSold);\n    }\n    // sum up how much was bought and sold\n    addToSumMap(\n      symbolToSpendingsSumMap,\n      symbol,\n      amountSold * transactionsData[buyId].price\n    );\n    sellIds.forEach((sellId) => {\n      const sell = buy.sells[sellId];\n      // sum up returns\n      const returns = -1 * sell.amount * sell.price;\n      // add to earnings\n      addToSumMap(symbolToEarningsSumMap, symbol, returns);\n    });\n  });\n\n  // combine\n  const symbolToProfitsSumMap: Map<string, number> = new Map<string, number>();\n  symbolToSpendingsSumMap.forEach((val, key) =>\n    addToSumMap(symbolToProfitsSumMap, key, -1 * val)\n  );\n  symbolToEarningsSumMap.forEach((val, key) =>\n    addToSumMap(symbolToProfitsSumMap, key, val)\n  );\n\n  // return\n  const profitSummary: IDollarCostAverageProfitSummary = {\n    profits: {},\n    notSoldAmount: {},\n  };\n  symbolToProfitsSumMap.forEach(\n    (val, key) => (profitSummary.profits[key] = val)\n  );\n  symbolToAmountNotSoldMap.forEach(\n    (val, key) => (profitSummary.notSoldAmount[key] = val)\n  );\n  return profitSummary;\n}\n","import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { DataTable } from './components/DataTable';\nimport { DollarCostAverages } from './components/DollarCostAverages';\nimport { ITransaction } from './model/ITransaction';\nimport { addTransaction, bulkAddTransactions, removeTransaction, selectDCATransactionsAmountRemaining, selectDCATransactionsMemoized, selectTransactions, updateDollarCostAverageProfitSummary, updateDollarCostAverageSummary, updateDollarCostAverageTransactions, updateTransaction } from './slices/transactionsSlice';\nimport { summarizeDollarCostAverageTransactions, summarizeProfitsFromDollarCostAverageTransactions } from './utilities/transaction-utils';\nimport { fetchCurrentCryptoPrices } from './slices/currentPricesSlice';\n\n\nfunction App() {\n  const dispatch = useAppDispatch();\n\n  const transactions = useAppSelector(selectTransactions);\n  const dcaTransactions = useAppSelector(selectDCATransactionsMemoized);\n  const dcaTransactionsRemaining = useAppSelector(selectDCATransactionsAmountRemaining);\n\n  function handleCreateTransaction(transaction?: ITransaction) {\n    dispatch(addTransaction(transaction ? transaction : null));\n  }\n\n  function handleUpdateTransaction(id: string, transaction: Partial<ITransaction>) {\n    dispatch(updateTransaction({ id: id, transaction: transaction }));\n  }\n\n  function handleDeleteTransaction(id: string) {\n    dispatch(removeTransaction({ id: id }));\n  }\n\n  function handleImportTransactionsComplete(transactions: ITransaction[]) {\n    dispatch(bulkAddTransactions(transactions));\n  }\n\n  // on open, fetch current prices\n  useEffect(() => {\n    dispatch(fetchCurrentCryptoPrices())\n  }, [dispatch])\n\n  // leverage React to listen to changes in state and convert to chart data accordingly\n  useEffect(() => {\n    const dcaSummary = summarizeDollarCostAverageTransactions(dcaTransactions);\n    const dcaProfitSummary = summarizeProfitsFromDollarCostAverageTransactions(dcaTransactions, transactions);\n    summarizeProfitsFromDollarCostAverageTransactions(dcaTransactions, transactions);\n    dispatch(updateDollarCostAverageTransactions(dcaTransactions));\n    dispatch(updateDollarCostAverageSummary(dcaSummary));\n    dispatch(updateDollarCostAverageProfitSummary(dcaProfitSummary));\n  }, [dispatch, transactions, dcaTransactions])\n  return (\n    <div>\n      <DollarCostAverages></DollarCostAverages>\n      <DataTable title=\"Cryptos\" data={transactions} dcaData={dcaTransactionsRemaining} addRow={handleCreateTransaction} updateRow={handleUpdateTransaction} deleteRow={handleDeleteTransaction} onImportComplete={handleImportTransactionsComplete} ></DataTable>\n      <div style={{ height: 100 }}></div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport currentPricesSlice from '../slices/currentPricesSlice';\nimport transactionsSlice from '../slices/transactionsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    transactionsData: transactionsSlice,\n    currentPrices: currentPricesSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType !==null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}